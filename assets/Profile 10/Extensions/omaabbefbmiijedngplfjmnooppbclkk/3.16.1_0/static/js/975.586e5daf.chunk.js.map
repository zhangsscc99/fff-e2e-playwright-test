{"version":3,"file":"static/js/975.586e5daf.chunk.js","mappings":"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","sources":["../../../packages/uikit/dist/components/ConnectLedgerNotification.js","../../../packages/uikit/dist/libs/errors/UserCancelledError.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAppSdk } from '../hooks/appSdk';\nimport { useTranslation } from '../hooks/translation';\nimport { Notification } from './Notification';\nimport { Button } from './fields/Button';\nimport { useConnectLedgerMutation } from '../state/ledger';\nimport styled from 'styled-components';\nimport { LedgerConnectionSteps } from './ledger/LedgerConnectionSteps';\nimport { UserCancelledError } from '../libs/errors/UserCancelledError';\nconst ConnectLedgerWrapper = styled.div `\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n`;\nconst LedgerConnectionStepsStyled = styled(LedgerConnectionSteps) `\n    margin: 1rem 0;\n`;\nconst ButtonsBlock = styled.div `\n    margin-top: 1rem;\n    display: flex;\n    gap: 8px;\n    width: 100%;\n\n    > * {\n        flex: 1;\n    }\n`;\nexport const LedgerContent = ({ ledgerParams, onClose, onSubmit }) => {\n    const { t } = useTranslation();\n    const [isCompleted, setIsCompleted] = useState(false);\n    const { mutateAsync: connectLedger, data: tonTransport, isLoading: isLedgerConnecting, isDeviceConnected, reset: resetConnection } = useConnectLedgerMutation();\n    const connect = () => {\n        connectLedger()\n            .then(transport => transport\n            .signTransaction(ledgerParams.path, ledgerParams.transaction)\n            .then(val => {\n            setIsCompleted(true);\n            setTimeout(() => onSubmit(val), 500);\n        })\n            .catch(e => {\n            console.error(e);\n            if (typeof e === 'object' &&\n                'message' in e &&\n                e.message.includes('0x6985')) {\n                onClose(new UserCancelledError('Cancel auth request'));\n            }\n            else {\n                onClose(e);\n            }\n        }))\n            .catch(console.debug);\n    };\n    useEffect(() => {\n        connect();\n    }, []);\n    const onRetry = () => {\n        resetConnection();\n        connect();\n    };\n    let currentStep = 'connect';\n    if (isDeviceConnected) {\n        currentStep = 'open-ton';\n    }\n    if (tonTransport) {\n        currentStep = 'confirm-tx';\n    }\n    if (isCompleted) {\n        currentStep = 'all-completed';\n    }\n    return (_jsxs(ConnectLedgerWrapper, { children: [_jsx(LedgerConnectionStepsStyled, { showConfirmTxStep: true, currentStep: currentStep }), _jsxs(ButtonsBlock, { children: [_jsx(Button, { secondary: true, onClick: () => onClose(new UserCancelledError('Cancel auth request')), children: t('cancel') }), _jsx(Button, { primary: true, loading: isLedgerConnecting || !!tonTransport || isCompleted, onClick: onRetry, children: t('try_again') })] })] }));\n};\nconst ConnectLedgerNotification = () => {\n    const sdk = useAppSdk();\n    const { t } = useTranslation();\n    const [ledgerParams, setLedgerParams] = useState(undefined);\n    const [requestId, setId] = useState(undefined);\n    const close = useCallback(() => {\n        setLedgerParams(undefined);\n        setId(undefined);\n    }, []);\n    const onSubmit = useCallback((result) => {\n        sdk.uiEvents.emit('response', {\n            method: 'response',\n            id: requestId,\n            params: result\n        });\n        close();\n    }, [sdk, requestId, close]);\n    const onCancel = useCallback((reason) => {\n        if (requestId) {\n            sdk.uiEvents.emit('response', {\n                method: 'response',\n                id: requestId,\n                params: reason ?? new Error('Unknown Ledger error')\n            });\n        }\n        close();\n    }, [requestId, sdk, close]);\n    useEffect(() => {\n        const handler = (options) => {\n            setLedgerParams(options.params);\n            setId(options.id);\n        };\n        sdk.uiEvents.on('ledger', handler);\n        return () => {\n            sdk.uiEvents.off('ledger', handler);\n        };\n    }, [sdk]);\n    const Content = useCallback(() => {\n        if (!ledgerParams || !requestId)\n            return undefined;\n        return _jsx(LedgerContent, { ledgerParams: ledgerParams, onClose: onCancel, onSubmit: onSubmit });\n    }, [sdk, ledgerParams, requestId, onCancel, onSubmit]);\n    return (_jsx(Notification, { isOpen: ledgerParams != null && requestId != null, handleClose: () => onCancel(new UserCancelledError('Cancel auth request')), title: t('ledger_connect_header'), children: Content }));\n};\nexport default ConnectLedgerNotification;\n","export class UserCancelledError extends Error {\n    cause;\n    constructor(message, cause) {\n        super(message);\n        this.name = 'UserCancelledError';\n        this.cause = cause;\n    }\n}\n"],"names":["ConnectLedgerWrapper","styled","div","_templateObject","_taggedTemplateLiteral","LedgerConnectionStepsStyled","LedgerConnectionSteps","_templateObject2","ButtonsBlock","_templateObject3","LedgerContent","_ref","ledgerParams","onClose","onSubmit","t","useTranslation","isCompleted","setIsCompleted","useState","mutateAsync","connectLedger","data","tonTransport","isLoading","isLedgerConnecting","isDeviceConnected","reset","resetConnection","useConnectLedgerMutation","connect","then","transport","signTransaction","path","transaction","val","setTimeout","catch","e","console","error","message","includes","UserCancelledError","debug","useEffect","currentStep","_jsxs","children","_jsx","showConfirmTxStep","Button","secondary","onClick","primary","loading","onRetry","ConnectLedgerNotification","sdk","useAppSdk","setLedgerParams","undefined","requestId","setId","close","useCallback","result","uiEvents","emit","method","id","params","onCancel","reason","Error","handler","options","on","off","Content","Notification","isOpen","handleClose","title","constructor","cause","super","_defineProperty","this","name"],"sourceRoot":""}