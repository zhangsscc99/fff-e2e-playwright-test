{"version":3,"file":"static/js/792.b77c95f7.chunk.js","mappings":"iSAYA,MAAMA,EAAgBC,EAAAA,MAAW,IAAM,yDA8CvC,EA7CiBC,KACb,MAAMC,GAASC,EAAAA,EAAAA,OACT,IAAEC,EAAG,WAAEC,IAAeC,EAAAA,EAAAA,MACtBC,GAAMC,EAAAA,EAAAA,QAAO,OACXC,UAAWC,EAAcC,cAAeC,EAAkBC,YAAaC,EAAgBC,mBAAoBC,EAAuBC,KAAMC,IAAcC,EAAAA,EAAAA,kBAAiB,CAC3KC,SAAU,CAAClB,EAAOmB,OAAOC,WAAYC,EAAAA,GAASC,SAAU,OACxDC,QAASC,IAAA,IAAC,UAAEC,GAAuBD,EAAA,OAAK,IAAIE,EAAAA,IAAYxB,EAAIyB,UAAUC,iBAAiB,CACnFC,UAAW7B,EAAOmB,OAAOC,WACzBU,MAAO,GACPC,SAAUN,EACVO,aAAa,GACf,EACFC,iBAAkBC,GAAaA,EAASC,SAAW,EAAID,EAASC,cAAWC,IAmBzEvB,EAAqBC,GAC3BuB,EAAAA,EAAAA,GAAazB,EAAgBC,EAAoBH,EAAkBP,EAAYE,GAE/E,MAAMiB,GAAWgB,EAAAA,EAAAA,UAAQ,KACdC,EAAAA,EAAAA,GAAuBvB,OAAWoB,IAC1C,CAACpB,IACJ,OAAKR,EAGmB,IAApBc,EAASkB,QACDC,EAAAA,EAAAA,KAAKC,EAAAA,SAAU,CAAEC,UAAUF,EAAAA,EAAAA,KAAKG,EAAAA,GAAsB,CAAC,GAAIC,UAAUJ,EAAAA,EAAAA,KAAK5C,EAAe,CAAC,MAE9FiD,EAAAA,EAAAA,MAAMC,EAAAA,SAAW,CAAEF,SAAU,EAACJ,EAAAA,EAAAA,KAAKO,EAAAA,GAAgB,CAAC,IAAIF,EAAAA,EAAAA,MAAMG,EAAAA,GAAW,CAAE5C,IAAKA,EAAKwC,SAAU,EAACJ,EAAAA,EAAAA,KAAKS,EAAAA,EAAoB,CAAEC,MAAO7B,IAAaT,IAAsB4B,EAAAA,EAAAA,KAAKW,EAAAA,GAAc,CAAEC,KAAM,WAL7LZ,EAAAA,EAAAA,KAAKG,EAAAA,GAAsB,CAAC,EAK6K,C","sources":["../../../packages/uikit/dist/pages/activity/Activity.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useInfiniteQuery } from '@tanstack/react-query';\nimport { AccountsApi } from '@tonkeeper/core/dist/tonApiV2';\nimport React, { Suspense, useMemo, useRef } from 'react';\nimport { InnerBody } from '../../components/Body';\nimport { ActivityHeader } from '../../components/Header';\nimport { ActivitySkeletonPage, SkeletonList } from '../../components/Skeleton';\nimport { MixedActivityGroup } from '../../components/activity/ActivityGroup';\nimport { useAppContext, useWalletContext } from '../../hooks/appContext';\nimport { useFetchNext } from '../../hooks/useFetchNext';\nimport { QueryKey } from '../../libs/queryKey';\nimport { getMixedActivityGroups } from '../../state/mixedActivity';\nconst EmptyActivity = React.lazy(() => import('../../components/activity/EmptyActivity'));\nconst Activity = () => {\n    const wallet = useWalletContext();\n    const { api, standalone } = useAppContext();\n    const ref = useRef(null);\n    const { isFetched: isTonFetched, fetchNextPage: fetchTonNextPage, hasNextPage: hasTonNextPage, isFetchingNextPage: isTonFetchingNextPage, data: tonEvents } = useInfiniteQuery({\n        queryKey: [wallet.active.rawAddress, QueryKey.activity, 'all'],\n        queryFn: ({ pageParam = undefined }) => new AccountsApi(api.tonApiV2).getAccountEvents({\n            accountId: wallet.active.rawAddress,\n            limit: 20,\n            beforeLt: pageParam,\n            subjectOnly: true\n        }),\n        getNextPageParam: lastPage => (lastPage.nextFrom > 0 ? lastPage.nextFrom : undefined)\n    });\n    // const {\n    //     isFetched: isTronFetched,\n    //     data: tronEvents,\n    //     isFetchingNextPage: isTronFetchingNextPage,\n    //     hasNextPage: hasTronNextPage,\n    //     fetchNextPage: fetchTronNextPage\n    // } = useInfiniteQuery({\n    //     queryKey: [wallet.tron?.ownerWalletAddress, wallet.network, QueryKey.tron],\n    //     queryFn: ({ pageParam = undefined }) =>\n    //         new TronApi(api.tronApi).getTransactions({\n    //             ownerAddress: wallet.tron!.ownerWalletAddress,\n    //             fingerprint: pageParam,\n    //             limit: 100\n    //         }),\n    //     getNextPageParam: lastPage => lastPage.fingerprint,\n    //     enabled: wallet.tron !== undefined\n    // });\n    const isFetchingNextPage = isTonFetchingNextPage;\n    useFetchNext(hasTonNextPage, isFetchingNextPage, fetchTonNextPage, standalone, ref);\n    //  useFetchNext(hasTronNextPage, isFetchingNextPage, fetchTronNextPage, standalone, ref);\n    const activity = useMemo(() => {\n        return getMixedActivityGroups(tonEvents, undefined);\n    }, [tonEvents]);\n    if (!isTonFetched) {\n        return _jsx(ActivitySkeletonPage, {});\n    }\n    if (activity.length === 0) {\n        return (_jsx(Suspense, { fallback: _jsx(ActivitySkeletonPage, {}), children: _jsx(EmptyActivity, {}) }));\n    }\n    return (_jsxs(_Fragment, { children: [_jsx(ActivityHeader, {}), _jsxs(InnerBody, { ref: ref, children: [_jsx(MixedActivityGroup, { items: activity }), isFetchingNextPage && _jsx(SkeletonList, { size: 3 })] })] }));\n};\nexport default Activity;\n"],"names":["EmptyActivity","React","Activity","wallet","useWalletContext","api","standalone","useAppContext","ref","useRef","isFetched","isTonFetched","fetchNextPage","fetchTonNextPage","hasNextPage","hasTonNextPage","isFetchingNextPage","isTonFetchingNextPage","data","tonEvents","useInfiniteQuery","queryKey","active","rawAddress","QueryKey","activity","queryFn","_ref","pageParam","AccountsApi","tonApiV2","getAccountEvents","accountId","limit","beforeLt","subjectOnly","getNextPageParam","lastPage","nextFrom","undefined","useFetchNext","useMemo","getMixedActivityGroups","length","_jsx","Suspense","fallback","ActivitySkeletonPage","children","_jsxs","_Fragment","ActivityHeader","InnerBody","MixedActivityGroup","items","SkeletonList","size"],"sourceRoot":""}