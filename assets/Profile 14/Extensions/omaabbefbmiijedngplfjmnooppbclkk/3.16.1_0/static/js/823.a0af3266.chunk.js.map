{"version":3,"file":"static/js/823.a0af3266.chunk.js","mappings":"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","sources":["../../../packages/uikit/dist/components/home/ReceiveAction.js","../../../packages/uikit/dist/components/home/SwapAction.js","../../../packages/uikit/dist/components/home/TonActions.js","../../../packages/uikit/dist/components/transfer/SendActionButton.js","../../../packages/uikit/dist/pages/coin/Jetton.js","../../../packages/uikit/dist/state/ton/tonActivity.js","../../../packages/uikit/dist/pages/coin/Ton.js","../../../packages/uikit/dist/pages/coin/Tron.js","../../../packages/uikit/dist/pages/coin/Coin.js","../../../packages/uikit/dist/state/swap/useSwapAssets.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { Action } from './Actions';\nimport { ReceiveIcon } from './HomeIcons';\nexport const ReceiveAction = ({ chain, jetton }) => {\n    const sdk = useAppSdk();\n    return (_jsx(Action, { icon: _jsx(ReceiveIcon, {}), title: 'wallet_receive', action: () => sdk.uiEvents.emit('receive', { method: 'receive', params: { chain, jetton } }) }));\n};\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Action } from './Actions';\nimport { SwapIcon } from '../Icon';\nimport { useSwapMobileNotification } from '../../state/swap/useSwapMobileNotification';\nimport { styled } from 'styled-components';\nimport { useSwapFromAsset } from '../../state/swap/useSwapForm';\nconst SwapIconStyled = styled(SwapIcon) `\n    height: 24px;\n    width: 24px;\n    color: ${p => p.theme.iconPrimary};\n`;\nexport const SwapAction = ({ fromAsset }) => {\n    const [_, setIsOpen] = useSwapMobileNotification();\n    const [__, setFromAsset] = useSwapFromAsset();\n    const onAction = () => {\n        if (fromAsset) {\n            setFromAsset(fromAsset);\n        }\n        setIsOpen(true);\n    };\n    return _jsx(Action, { icon: _jsx(SwapIconStyled, {}), title: 'swap_title', action: onAction });\n};\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { SendAction } from '../transfer/SendActionButton';\nimport { ActionsRow } from './Actions';\nimport { BuyAction } from './BuyAction';\nimport { ReceiveAction } from './ReceiveAction';\nimport { SwapAction } from './SwapAction';\nimport { TON_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nexport const HomeActions = ({ chain }) => {\n    return (_jsxs(ActionsRow, { children: [_jsx(BuyAction, {}), _jsx(SendAction, { asset: \"TON\", chain: chain }), _jsx(ReceiveAction, {}), _jsx(SwapAction, { fromAsset: TON_ASSET })] }));\n};\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { Action } from '../home/Actions';\nimport { SendIcon } from '../home/HomeIcons';\nexport const SendAction = ({ asset, chain }) => {\n    const sdk = useAppSdk();\n    return (_jsx(Action, { icon: _jsx(SendIcon, {}), title: 'wallet_send', action: () => sdk.uiEvents.emit('transfer', {\n            method: 'transfer',\n            id: Date.now(),\n            params: { asset, chain }\n        }) }));\n};\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useInfiniteQuery } from '@tanstack/react-query';\nimport { Address } from '@ton/core';\nimport { BLOCKCHAIN_NAME } from '@tonkeeper/core/dist/entries/crypto';\nimport { AccountsApi } from '@tonkeeper/core/dist/tonApiV2';\nimport { formatDecimals } from '@tonkeeper/core/dist/utils/balance';\nimport { useMemo, useRef } from 'react';\nimport { InnerBody } from '../../components/Body';\nimport { CoinSkeletonPage } from '../../components/Skeleton';\nimport { SubHeader } from '../../components/SubHeader';\nimport { ActivityList } from '../../components/activity/ActivityGroup';\nimport { ActionsRow } from '../../components/home/Actions';\nimport { ReceiveAction } from '../../components/home/ReceiveAction';\nimport { CoinInfo } from '../../components/jettons/Info';\nimport { SendAction } from '../../components/transfer/SendActionButton';\nimport { useAppContext, useWalletContext } from '../../hooks/appContext';\nimport { useFormatBalance } from '../../hooks/balance';\nimport { useFetchNext } from '../../hooks/useFetchNext';\nimport { JettonKey, QueryKey } from '../../libs/queryKey';\nimport { useJettonBalance, useJettonInfo } from '../../state/jetton';\nimport { useFormatFiat, useRate } from '../../state/rates';\nimport { SwapAction } from '../../components/home/SwapAction';\nimport { tonAssetAddressToString } from '@tonkeeper/core/dist/entries/crypto/asset/ton-asset';\nimport { useAllSwapAssets } from '../../state/swap/useSwapAssets';\nconst JettonHistory = ({ balance, innerRef }) => {\n    const { api, standalone } = useAppContext();\n    const wallet = useWalletContext();\n    const { isFetched, hasNextPage, data, isFetchingNextPage, fetchNextPage } = useInfiniteQuery({\n        queryKey: [balance.walletAddress.address, QueryKey.activity, JettonKey.history],\n        queryFn: ({ pageParam = undefined }) => new AccountsApi(api.tonApiV2).getAccountJettonHistoryByID({\n            accountId: wallet.active.rawAddress,\n            jettonId: balance.jetton.address,\n            limit: 20,\n            beforeLt: pageParam\n        }),\n        getNextPageParam: lastPage => (lastPage.nextFrom > 0 ? lastPage.nextFrom : undefined)\n    });\n    useFetchNext(hasNextPage, isFetchingNextPage, fetchNextPage, standalone, innerRef);\n    return (_jsx(ActivityList, { isFetched: isFetched, isFetchingNextPage: isFetchingNextPage, tonEvents: data }));\n};\nconst JettonHeader = ({ info, balance }) => {\n    const [amount, address] = useMemo(() => [\n        formatDecimals(balance.balance, info.metadata.decimals),\n        Address.parse(balance.jetton.address).toString()\n    ], [info, balance]);\n    const { data } = useRate(address);\n    const total = useFormatBalance(amount, info.metadata.decimals);\n    const { fiatAmount } = useFormatFiat(data, amount);\n    const { description, image } = info.metadata;\n    return (_jsx(CoinInfo, { amount: total, symbol: info.metadata.symbol, price: fiatAmount, description: description, image: image }));\n};\nexport const JettonContent = ({ jettonAddress }) => {\n    const { data: info } = useJettonInfo(jettonAddress);\n    const { data: balance } = useJettonBalance(jettonAddress);\n    const { data: swapAssets } = useAllSwapAssets();\n    const jettonAddressRaw = Address.parse(jettonAddress).toRawString();\n    const swapAsset = swapAssets?.find(a => tonAssetAddressToString(a.address) === jettonAddressRaw);\n    const ref = useRef(null);\n    if (!info || !balance || !swapAssets) {\n        return _jsx(CoinSkeletonPage, {});\n    }\n    return (_jsxs(_Fragment, { children: [_jsx(SubHeader, { title: info.metadata.name }), _jsxs(InnerBody, { ref: ref, children: [_jsx(JettonHeader, { balance: balance, info: info }), _jsxs(ActionsRow, { children: [_jsx(SendAction, { asset: info.metadata.address, chain: BLOCKCHAIN_NAME.TON }), _jsx(ReceiveAction, { jetton: info.metadata.address }), swapAsset && _jsx(SwapAction, { fromAsset: swapAsset })] }), _jsx(JettonHistory, { balance: balance, innerRef: ref })] })] }));\n};\n","export const seeIfTonTransfer = (action) => {\n    if (action.type === 'TonTransfer') {\n        return true;\n    }\n    else if (action.type === 'ContractDeploy') {\n        if (action.contractDeploy?.interfaces?.includes('wallet')) {\n            return true;\n        }\n    }\n    return false;\n};\nexport const groupAndFilterTonActivityItems = (data) => {\n    return {\n        pages: data.pages.reduce((acc, item) => {\n            const events = item.events.reduce((e, event) => {\n                if (event.actions.every(seeIfTonTransfer)) {\n                    e.push(event);\n                }\n                return e;\n            }, []);\n            if (events.length) {\n                acc.push({ events, nextFrom: 0 });\n            }\n            return acc;\n        }, []),\n        pageParams: []\n    };\n};\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useInfiniteQuery } from '@tanstack/react-query';\nimport { BLOCKCHAIN_NAME, CryptoCurrency } from '@tonkeeper/core/dist/entries/crypto';\nimport { AccountsApi } from '@tonkeeper/core/dist/tonApiV2';\nimport { formatDecimals } from '@tonkeeper/core/dist/utils/balance';\nimport { useMemo, useRef } from 'react';\nimport { InnerBody } from '../../components/Body';\nimport { CoinSkeletonPage } from '../../components/Skeleton';\nimport { SubHeader } from '../../components/SubHeader';\nimport { ActivityList } from '../../components/activity/ActivityGroup';\nimport { HomeActions } from '../../components/home/TonActions';\nimport { CoinInfo } from '../../components/jettons/Info';\nimport { useAppContext, useWalletContext } from '../../hooks/appContext';\nimport { useFormatBalance } from '../../hooks/balance';\nimport { useTranslation } from '../../hooks/translation';\nimport { useFetchNext } from '../../hooks/useFetchNext';\nimport { QueryKey } from '../../libs/queryKey';\nimport { useFormatFiat, useRate } from '../../state/rates';\nimport { groupAndFilterTonActivityItems } from '../../state/ton/tonActivity';\nimport { useWalletAccountInfo } from '../../state/wallet';\nconst TonHeader = ({ info: { balance } }) => {\n    const { t } = useTranslation();\n    const amount = useMemo(() => formatDecimals(balance), [balance]);\n    const total = useFormatBalance(amount);\n    const { data } = useRate(CryptoCurrency.TON);\n    const { fiatAmount } = useFormatFiat(data, amount);\n    return (_jsx(CoinInfo, { amount: total, symbol: \"TON\", price: fiatAmount, description: t('Ton_page_description'), image: \"https://wallet.tonkeeper.com/img/toncoin.svg\" }));\n};\nexport const TonPage = () => {\n    const { t } = useTranslation();\n    const ref = useRef(null);\n    const { data: info } = useWalletAccountInfo();\n    const { api, standalone } = useAppContext();\n    const wallet = useWalletContext();\n    const { fetchNextPage, hasNextPage, isFetchingNextPage, data, isFetched } = useInfiniteQuery({\n        queryKey: [wallet.active.rawAddress, QueryKey.activity, 'ton'],\n        queryFn: ({ pageParam = undefined }) => new AccountsApi(api.tonApiV2).getAccountEvents({\n            accountId: wallet.active.rawAddress,\n            limit: 20,\n            beforeLt: pageParam,\n            subjectOnly: true\n        }),\n        getNextPageParam: lastPage => (lastPage.nextFrom > 0 ? lastPage.nextFrom : undefined)\n    });\n    useFetchNext(hasNextPage, isFetchingNextPage, fetchNextPage, standalone, ref);\n    const activity = useMemo(() => {\n        return data ? groupAndFilterTonActivityItems(data) : undefined;\n    }, [data]);\n    if (!info) {\n        return _jsx(CoinSkeletonPage, { activity: 4 });\n    }\n    return (_jsxs(_Fragment, { children: [_jsx(SubHeader, { title: t('Toncoin') }), _jsxs(InnerBody, { ref: ref, children: [_jsx(TonHeader, { info: info }), _jsx(HomeActions, { chain: BLOCKCHAIN_NAME.TON }), _jsx(ActivityList, { isFetched: isFetched, isFetchingNextPage: isFetchingNextPage, tonEvents: activity })] })] }));\n};\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useInfiniteQuery } from '@tanstack/react-query';\nimport { BLOCKCHAIN_NAME } from '@tonkeeper/core/dist/entries/crypto';\nimport { TronApi } from '@tonkeeper/core/dist/tronApi';\nimport { formatDecimals } from '@tonkeeper/core/dist/utils/balance';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { Route, Routes, useNavigate, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { InnerBody } from '../../components/Body';\nimport { CoinSkeletonPage } from '../../components/Skeleton';\nimport { SubHeader } from '../../components/SubHeader';\nimport { Body2 } from '../../components/Text';\nimport { ActivityList } from '../../components/activity/ActivityGroup';\nimport { ActionsRow } from '../../components/home/Actions';\nimport { ReceiveAction } from '../../components/home/ReceiveAction';\nimport { CoinInfo } from '../../components/jettons/Info';\nimport { SendAction } from '../../components/transfer/SendActionButton';\nimport { useAppContext, useWalletContext } from '../../hooks/appContext';\nimport { useFormatBalance } from '../../hooks/balance';\nimport { useFetchNext } from '../../hooks/useFetchNext';\nimport { QueryKey } from '../../libs/queryKey';\nimport { AppRoute } from '../../libs/routes';\nimport { useFormatFiat, useRate } from '../../state/rates';\nimport { useTronBalance, useTronWalletState } from '../../state/tron/tron';\nconst TronHeader = ({ tronBalance: { token, weiAmount } }) => {\n    const amount = useMemo(() => formatDecimals(weiAmount, token.decimals), [weiAmount, token]);\n    const total = useFormatBalance(amount, token.decimals);\n    const { data } = useRate(token.symbol);\n    const { fiatAmount } = useFormatFiat(data, amount);\n    return _jsx(CoinInfo, { amount: total, symbol: token.symbol, price: fiatAmount, image: token.image });\n};\nconst TronActivity = ({ tron, innerRef }) => {\n    const wallet = useWalletContext();\n    const { standalone, api: { tronApi } } = useAppContext();\n    const { data, isFetched, isFetchingNextPage, hasNextPage, fetchNextPage } = useInfiniteQuery({\n        queryKey: [tron.ownerWalletAddress, wallet.network, QueryKey.tron],\n        queryFn: ({ pageParam = undefined }) => new TronApi(tronApi).getTransactions({\n            ownerAddress: tron.ownerWalletAddress,\n            fingerprint: pageParam,\n            limit: 100\n        }),\n        getNextPageParam: lastPage => lastPage.fingerprint\n    });\n    useFetchNext(hasNextPage, isFetchingNextPage, fetchNextPage, standalone, innerRef);\n    return (_jsx(ActivityList, { isFetched: isFetched, isFetchingNextPage: isFetchingNextPage, tronEvents: data }));\n};\nconst Layout = styled.div `\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    line-height: 22px;\n`;\nconst Label = styled(Body2) `\n    color: ${props => props.theme.textSecondary};\n`;\nconst TronAsset = ({ tron }) => {\n    const { address } = useParams();\n    const navigate = useNavigate();\n    const { data: tronBalance, isLoading, isError } = useTronBalance(tron, address);\n    useEffect(() => {\n        if (isError) {\n            navigate(AppRoute.home);\n        }\n    }, [isError]);\n    const ref = useRef(null);\n    if (isLoading || !tronBalance) {\n        return _jsx(CoinSkeletonPage, {});\n    }\n    return (_jsxs(_Fragment, { children: [_jsx(SubHeader, { title: _jsxs(Layout, { children: [_jsx(\"div\", { children: tronBalance.token.name }), _jsx(Label, { children: \"TRC20\" })] }) }), _jsxs(InnerBody, { ref: ref, children: [_jsx(TronHeader, { tronBalance: tronBalance }), _jsxs(ActionsRow, { children: [_jsx(SendAction, { asset: \"TON\", chain: BLOCKCHAIN_NAME.TRON }), _jsx(ReceiveAction, { chain: BLOCKCHAIN_NAME.TRON })] }), _jsx(TronActivity, { tron: tron, innerRef: ref })] })] }));\n};\nexport const TronPage = () => {\n    const navigate = useNavigate();\n    const { data: state, isLoading, isError } = useTronWalletState();\n    useEffect(() => {\n        if (isError) {\n            navigate(AppRoute.home);\n        }\n    }, [isError]);\n    if (isLoading || !state) {\n        return _jsx(CoinSkeletonPage, {});\n    }\n    return (_jsx(Routes, { children: _jsx(Route, { path: \":address\", element: _jsx(TronAsset, { tron: state }) }) }));\n};\n","import { Fragment as _Fragment, jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { AppRoute } from '../../libs/routes';\nimport { JettonContent } from './Jetton';\nimport { TonPage } from './Ton';\nimport { TronPage } from './Tron';\nconst CoinPage = () => {\n    const navigate = useNavigate();\n    const { name } = useParams();\n    useEffect(() => {\n        if (!name) {\n            navigate(AppRoute.home);\n        }\n    }, [name]);\n    if (!name)\n        return _jsx(_Fragment, {});\n    if (name === 'tron') {\n        return _jsx(TronPage, {});\n    }\n    else if (name === 'ton') {\n        return _jsx(TonPage, {});\n    }\n    else {\n        return _jsx(JettonContent, { jettonAddress: decodeURIComponent(name) });\n    }\n};\nexport default CoinPage;\n","import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { Address } from '@ton/core';\nimport { AppKey } from '@tonkeeper/core/dist/Keys';\nimport { BLOCKCHAIN_NAME, CryptoCurrency } from '@tonkeeper/core/dist/entries/crypto';\nimport { AssetAmount } from '@tonkeeper/core/dist/entries/crypto/asset/asset-amount';\nimport { packAssetId } from '@tonkeeper/core/dist/entries/crypto/asset/basic-asset';\nimport { isTon, tonAssetAddressFromString, tonAssetAddressToString } from '@tonkeeper/core/dist/entries/crypto/asset/ton-asset';\nimport { JettonsApi } from '@tonkeeper/core/dist/tonApiV2';\nimport { shiftedDecimals } from '@tonkeeper/core/dist/utils/balance';\nimport { seeIfValidTonAddress } from '@tonkeeper/core/dist/utils/common';\nimport BigNumber from 'bignumber.js';\nimport { useMemo } from 'react';\nimport { useAppContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { atom, useAtom } from '../../libs/atom';\nimport { QueryKey } from '../../libs/queryKey';\nimport { useAssets } from '../home';\nimport { useJettonList } from '../jetton';\nimport { useRate } from '../rates';\nimport { useSwapsConfig } from './useSwapsConfig';\nexport function useAllSwapAssets() {\n    const { swapService } = useSwapsConfig();\n    const { data: customAssets } = useUserCustomSwapAssets();\n    return useQuery({\n        queryKey: [QueryKey.swapAllAssets, customAssets],\n        queryFn: async () => {\n            try {\n                const assets = await swapService.swapAssets();\n                const fetchedAssets = assets\n                    .map(asset => {\n                    const address = asset.address === 'ton' ? 'TON' : Address.parse(asset.address);\n                    return {\n                        id: packAssetId(BLOCKCHAIN_NAME.TON, address),\n                        symbol: asset.symbol,\n                        decimals: asset.decimals,\n                        name: asset.name,\n                        image: asset.image,\n                        blockchain: BLOCKCHAIN_NAME.TON,\n                        address\n                    };\n                })\n                    .filter(asset => !(customAssets || []).some(ca => ca.id === asset.id));\n                return fetchedAssets.concat(customAssets || []);\n            }\n            catch (e) {\n                console.error(e);\n                return [];\n            }\n        },\n        enabled: !!customAssets\n    });\n}\nconst swapTokensFilter = atom('');\nexport function useSwapTokensFilter() {\n    return useAtom(swapTokensFilter);\n}\nexport function useWalletSwapAssets() {\n    const [walletAssetsData] = useAssets();\n    const { data: allAssets } = useAllSwapAssets();\n    const { data: tonRate } = useRate(CryptoCurrency.TON);\n    const { fiat } = useAppContext();\n    return useQuery({\n        queryKey: [QueryKey.swapWalletAssets, allAssets, walletAssetsData, tonRate, fiat],\n        queryFn: async () => {\n            if (!walletAssetsData || !allAssets || !tonRate) {\n                return [];\n            }\n            const assetsAmounts = allAssets.map(asset => {\n                if (isTon(asset.address)) {\n                    return {\n                        assetAmount: new AssetAmount({\n                            asset,\n                            weiAmount: walletAssetsData.ton.info.balance\n                        }),\n                        fiatAmount: shiftedDecimals(new BigNumber(walletAssetsData.ton.info.balance)).multipliedBy(tonRate.prices)\n                    };\n                }\n                const balance = walletAssetsData.ton.jettons.balances.find(j => Address.parse(j.jetton.address).equals(asset.address));\n                return {\n                    assetAmount: new AssetAmount({\n                        asset,\n                        weiAmount: balance?.balance || 0\n                    }),\n                    fiatAmount: shiftedDecimals(new BigNumber(balance?.balance || 0), asset.decimals).multipliedBy(new BigNumber(balance?.price?.prices?.[fiat] || 0))\n                };\n            });\n            assetsAmounts.sort((a, b) => {\n                if (a.fiatAmount.isZero() && b.fiatAmount.isZero()) {\n                    return b.assetAmount.weiAmount.comparedTo(a.assetAmount.weiAmount);\n                }\n                return b.fiatAmount.comparedTo(a.fiatAmount);\n            });\n            return assetsAmounts;\n        },\n        enabled: !!walletAssetsData && !!allAssets && !!tonRate\n    });\n}\nexport const useWalletFilteredSwapAssets = () => {\n    const [filter] = useSwapTokensFilter();\n    const { data: walletSwapAssets } = useWalletSwapAssets();\n    return useMemo(() => {\n        if (!walletSwapAssets) {\n            return undefined;\n        }\n        return walletSwapAssets.filter(swapAsset => {\n            if (!filter) {\n                return true;\n            }\n            if (seeIfValidTonAddress(filter)) {\n                return Address.parse(filter).equals(swapAsset.assetAmount.asset.address);\n            }\n            const upperCaseFilter = filter.toUpperCase();\n            if (swapAsset.assetAmount.asset.symbol.toUpperCase().includes(upperCaseFilter) ||\n                swapAsset.assetAmount.asset.name?.toUpperCase().includes(upperCaseFilter)) {\n                return true;\n            }\n        });\n    }, [filter, walletSwapAssets]);\n};\nexport const useSwapCustomTokenSearch = () => {\n    const [filter] = useSwapTokensFilter();\n    const isAddress = seeIfValidTonAddress(filter);\n    const { api, fiat } = useAppContext();\n    const { data: jettons } = useJettonList();\n    return useQuery({\n        queryKey: [QueryKey.swapCustomToken, filter, jettons, fiat],\n        queryFn: async () => {\n            if (!isAddress) {\n                return null;\n            }\n            try {\n                const address = Address.parse(filter);\n                const response = await new JettonsApi(api.tonApiV2).getJettonInfo({\n                    accountId: address.toRawString()\n                });\n                const tonAsset = {\n                    address,\n                    image: response.metadata.image,\n                    blockchain: BLOCKCHAIN_NAME.TON,\n                    name: response.metadata.name,\n                    symbol: response.metadata.symbol,\n                    decimals: Number(response.metadata.decimals),\n                    id: packAssetId(BLOCKCHAIN_NAME.TON, address)\n                };\n                const jb = jettons?.balances.find(j => Address.parse(j.jetton.address).equals(address));\n                const assetAmount = new AssetAmount({\n                    asset: tonAsset,\n                    weiAmount: jb?.balance || new BigNumber(0)\n                });\n                return {\n                    assetAmount,\n                    fiatAmount: shiftedDecimals(new BigNumber(jb?.balance || 0), tonAsset.decimals).multipliedBy(new BigNumber(jb?.price?.prices?.[fiat] || 0))\n                };\n            }\n            catch (e) {\n                console.error(e);\n                return null;\n            }\n        },\n        enabled: isAddress && !!jettons\n    });\n};\nexport const useUserCustomSwapAssets = () => {\n    const sdk = useAppSdk();\n    return useQuery([AppKey.SWAP_CUSTOM_ASSETS], async () => {\n        const assetsSerialized = await sdk.storage.get(AppKey.SWAP_CUSTOM_ASSETS);\n        return (assetsSerialized?.map(s => ({\n            ...s,\n            blockchain: s.blockchain,\n            address: tonAssetAddressFromString(s.address),\n            id: packAssetId(s.blockchain, s.address)\n        })) || []);\n    });\n};\nexport const useAddUserCustomSwapAsset = () => {\n    const sdk = useAppSdk();\n    const client = useQueryClient();\n    return useMutation(async (asset) => {\n        const current = (await sdk.storage.get(AppKey.SWAP_CUSTOM_ASSETS)) || [];\n        await sdk.storage.set(AppKey.SWAP_CUSTOM_ASSETS, [\n            ...current,\n            { ...asset, address: tonAssetAddressToString(asset.address) }\n        ]);\n        await client.invalidateQueries([AppKey.SWAP_CUSTOM_ASSETS]);\n    });\n};\n"],"names":["ReceiveAction","_ref","chain","jetton","sdk","useAppSdk","_jsx","Action","icon","ReceiveIcon","title","action","uiEvents","emit","method","params","SwapIconStyled","styled","SwapIcon","_templateObject","_taggedTemplateLiteral","p","theme","iconPrimary","SwapAction","fromAsset","_","setIsOpen","useSwapMobileNotification","__","setFromAsset","useSwapFromAsset","onAction","HomeActions","_jsxs","ActionsRow","children","BuyAction","SendAction","asset","TON_ASSET","SendIcon","id","Date","now","JettonHistory","balance","innerRef","api","standalone","useAppContext","wallet","useWalletContext","isFetched","hasNextPage","data","isFetchingNextPage","fetchNextPage","useInfiniteQuery","queryKey","walletAddress","address","QueryKey","activity","JettonKey","history","queryFn","_ref2","pageParam","AccountsApi","tonApiV2","getAccountJettonHistoryByID","accountId","active","rawAddress","jettonId","limit","beforeLt","getNextPageParam","lastPage","nextFrom","undefined","useFetchNext","ActivityList","tonEvents","JettonHeader","_ref3","info","amount","useMemo","formatDecimals","metadata","decimals","Address","parse","toString","useRate","total","useFormatBalance","fiatAmount","useFormatFiat","description","image","CoinInfo","symbol","price","JettonContent","_ref4","jettonAddress","useJettonInfo","useJettonBalance","swapAssets","useAllSwapAssets","jettonAddressRaw","toRawString","swapAsset","find","a","tonAssetAddressToString","ref","useRef","_Fragment","SubHeader","name","InnerBody","BLOCKCHAIN_NAME","TON","CoinSkeletonPage","seeIfTonTransfer","type","_action$contractDeplo","contractDeploy","interfaces","includes","TonHeader","t","useTranslation","CryptoCurrency","TonPage","useWalletAccountInfo","getAccountEvents","subjectOnly","pages","reduce","acc","item","events","e","event","actions","every","push","length","pageParams","groupAndFilterTonActivityItems","TronHeader","tronBalance","token","weiAmount","TronActivity","tron","tronApi","ownerWalletAddress","network","TronApi","getTransactions","ownerAddress","fingerprint","tronEvents","Layout","div","Label","Body2","_templateObject2","props","textSecondary","TronAsset","useParams","navigate","useNavigate","isLoading","isError","useTronBalance","useEffect","AppRoute","home","TRON","TronPage","state","useTronWalletState","Routes","Route","path","element","CoinPage","decodeURIComponent","swapService","useSwapsConfig","customAssets","useUserCustomSwapAssets","useQuery","swapAllAssets","async","assets","map","packAssetId","blockchain","filter","some","ca","concat","console","error","enabled","swapTokensFilter","atom","useSwapTokensFilter","useAtom","useWalletFilteredSwapAssets","walletSwapAssets","walletAssetsData","useAssets","allAssets","tonRate","fiat","swapWalletAssets","assetsAmounts","_balance$price","isTon","assetAmount","AssetAmount","ton","shiftedDecimals","BigNumber","multipliedBy","prices","jettons","balances","j","equals","sort","b","isZero","comparedTo","useWalletSwapAssets","_swapAsset$assetAmoun","seeIfValidTonAddress","upperCaseFilter","toUpperCase","useSwapCustomTokenSearch","isAddress","useJettonList","swapCustomToken","_jb$price","response","JettonsApi","getJettonInfo","tonAsset","Number","jb","AppKey","SWAP_CUSTOM_ASSETS","assetsSerialized","storage","get","s","tonAssetAddressFromString","useAddUserCustomSwapAsset","client","useQueryClient","useMutation","current","set","invalidateQueries"],"sourceRoot":""}