{"version":3,"file":"static/js/976.01ee577c.chunk.js","mappings":"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","sources":["../../../packages/core/dist/utils/address.js","../../../packages/uikit/dist/libs/atom.js","../../../packages/uikit/dist/state/swap/useSwapForm.js","../../../packages/uikit/dist/state/stonfi.js","../../../packages/uikit/dist/state/swap/useSwapMobileNotification.js","../../../packages/core/dist/swapsApi/core/CancelablePromise.js","../../../packages/core/dist/swapsApi/core/OpenAPI.js","../../../packages/core/dist/swapsApi/core/ApiError.js","../../../packages/core/dist/swapsApi/core/request.js","../../../packages/core/dist/swapsApi/services/SwapService.js","../../../packages/uikit/dist/state/swap/useSwapsConfig.js"],"sourcesContent":["import { Address } from '@ton/core';\nexport function eqAddresses(address1, address2) {\n    if (address1 && address1 === address2) {\n        return true;\n    }\n    try {\n        if (!address2) {\n            return false;\n        }\n        if (typeof address1 === 'string') {\n            address1 = Address.parse(address1);\n        }\n        if (typeof address2 === 'string') {\n            address2 = Address.parse(address2);\n        }\n        return address1.equals(address2);\n    }\n    catch (e) {\n        return false;\n    }\n}\n","import { useCallback, useEffect, useState } from 'react';\nexport class Atom {\n    _value;\n    subscribers = [];\n    get value() {\n        return this._value;\n    }\n    constructor(value) {\n        this._value = value;\n    }\n    subscribe(fn) {\n        this.subscribers.push(fn);\n        return () => {\n            this.subscribers = this.subscribers.filter(sub => sub !== fn);\n        };\n    }\n    next(value) {\n        this._value = value;\n        this.subscribers.forEach(fn => fn(value));\n    }\n}\nexport const atom = (value) => new Atom(value);\nexport function useAtom(a) {\n    const [value, setValue] = useState(a.value);\n    useEffect(() => {\n        setValue(a.value);\n        return a.subscribe(v => {\n            setValue(v);\n        });\n    }, [a]);\n    const next = useCallback((newValue) => {\n        if (typeof newValue === 'function') {\n            newValue = newValue(a.value);\n        }\n        a.next(newValue);\n    }, [a]);\n    return [value, next];\n}\n","import { TON_ASSET, TON_USDT_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { tonAssetAddressToString } from '@tonkeeper/core/dist/entries/crypto/asset/ton-asset';\nimport BigNumber from 'bignumber.js';\nimport { atom, useAtom } from '../../libs/atom';\nimport { useQuery } from '@tanstack/react-query';\nimport { QueryKey } from '../../libs/queryKey';\nimport { useAssetWeiBalance } from '../home';\nimport { useRate } from '../rates';\nimport { useSwapsConfig } from './useSwapsConfig';\nimport { useCallback } from 'react';\nimport { eqAddresses } from '@tonkeeper/core/dist/utils/address';\nexport const swapFromAsset$ = atom(TON_ASSET);\nexport const swapToAsset$ = atom(TON_USDT_ASSET);\nexport const swapAmount$ = atom(new BigNumber(1));\nexport const useSwapFromAsset = () => {\n    const [fromAsset, _setFromAsset] = useAtom(swapFromAsset$);\n    const [_, _setToAsset] = useAtom(swapToAsset$);\n    const setFromAsset = useCallback((asset) => {\n        if (eqAddresses(asset.address, swapToAsset$.value.address)) {\n            _setToAsset(swapFromAsset$.value);\n        }\n        _setFromAsset(asset);\n    }, [_setFromAsset, _setToAsset]);\n    return [fromAsset, setFromAsset];\n};\nexport const useSwapToAsset = () => {\n    const [toAsset, _setToAsset] = useAtom(swapToAsset$);\n    const [_, _setFromAsset] = useAtom(swapFromAsset$);\n    const setToAsset = useCallback((asset) => {\n        if (eqAddresses(asset.address, swapFromAsset$.value.address)) {\n            _setFromAsset(swapToAsset$.value);\n        }\n        _setToAsset(asset);\n    }, [_setToAsset, _setFromAsset]);\n    return [toAsset, setToAsset];\n};\nexport const useSwapFromAmount = () => {\n    return useAtom(swapAmount$);\n};\nexport const useMaxSwapValue = () => {\n    const TON_GAS_SAFETY_NANO_CONST = 1000000;\n    const { data: swapGas, isError } = useSwapGasConfig();\n    const [fromAsset] = useSwapFromAsset();\n    const balance = useAssetWeiBalance(fromAsset);\n    return useQuery({\n        queryKey: [QueryKey.swapMaxValue, swapGas, fromAsset.id, balance?.toFixed(0)],\n        queryFn: async () => {\n            if (isError) {\n                return balance;\n            }\n            if (!balance || !swapGas) {\n                return undefined;\n            }\n            if (fromAsset.id === TON_ASSET.id) {\n                const dedustGas = new BigNumber(swapGas.dedust.tonToJetton);\n                const stonfiGas = new BigNumber(swapGas.stonfi.tonToJetton);\n                const balanceWithoutFee = balance\n                    .minus(BigNumber.max(dedustGas, stonfiGas))\n                    .minus(TON_GAS_SAFETY_NANO_CONST);\n                if (balanceWithoutFee.lt(0)) {\n                    return new BigNumber(0);\n                }\n                return balanceWithoutFee;\n            }\n            else {\n                return balance;\n            }\n        },\n        enabled: (!!swapGas || isError) && balance !== undefined\n    });\n};\nexport const useSwapGasConfig = () => {\n    const { swapService } = useSwapsConfig();\n    return useQuery({\n        queryKey: [QueryKey.swapGasConfig],\n        queryFn: async () => {\n            return swapService.swapGas();\n        }\n    });\n};\nexport const selectedSwap$ = atom(undefined);\nexport const useSelectedSwap = () => {\n    return useAtom(selectedSwap$);\n};\nexport const useSwapPriceImpact = () => {\n    const [fromAsset] = useSwapFromAsset();\n    const [toAsset] = useSwapToAsset();\n    const [selectedSwap] = useSelectedSwap();\n    const { data: fromAssetRate, isLoading: fromAssetRateLoading } = useRate(tonAssetAddressToString(fromAsset.address));\n    const { data: toAssetRate, isLoading: toAssetRateLoading } = useRate(tonAssetAddressToString(toAsset.address));\n    const trade = selectedSwap?.trade;\n    if (!trade || toAssetRateLoading || fromAssetRateLoading) {\n        return undefined;\n    }\n    if (!fromAssetRate?.prices || !toAssetRate?.prices) {\n        return null;\n    }\n    const fromFiat = new BigNumber(trade.from.relativeAmount).multipliedBy(fromAssetRate.prices);\n    const toFiat = new BigNumber(trade.to.relativeAmount).multipliedBy(toAssetRate.prices);\n    if (fromFiat.isEqualTo(toFiat)) {\n        return new BigNumber(0);\n    }\n    return fromFiat.minus(toFiat).dividedBy(fromFiat);\n};\nexport const priceImpactStatus = (priceImpact) => {\n    if (!priceImpact)\n        return 'unknown';\n    if (priceImpact.isGreaterThan(0.05))\n        return 'high';\n    if (priceImpact.isGreaterThan(0.01))\n        return 'medium';\n    return 'low';\n};\nexport const useIsSwapFormNotCompleted = () => {\n    const [fromAmount] = useSwapFromAmount();\n    return !fromAmount || fromAmount.isZero();\n};\n","import { useAppContext } from '../hooks/appContext';\nimport { isTon } from '@tonkeeper/core/dist/entries/crypto/asset/ton-asset';\nexport const useStonfiSwapLink = (fromToken, toToken) => {\n    const { tonendpoint, env } = useAppContext();\n    return generateStonfiSwapLink(fromToken, toToken, tonendpoint.targetEnv, env?.stonfiReferralAddress);\n};\nexport const generateStonfiSwapLink = (fromToken, toToken, targetEnv, referralAddress) => {\n    const url = new URL('https://app.ston.fi/swap');\n    url.searchParams.append('ft', addressToStonfiAddress(fromToken));\n    url.searchParams.append('tt', addressToStonfiAddress(toToken));\n    url.searchParams.append('referral_address', referralAddress || '');\n    url.searchParams.append('utm_source', `tokeeper-${targetEnv}`);\n    url.searchParams.append('utm_medium', 'organic');\n    url.searchParams.append('utm_campaign', 'swap_button');\n    url.searchParams.append('utm_content', 'TODO');\n    return url.toString();\n};\nconst addressToStonfiAddress = (address) => {\n    if (isTon(address)) {\n        return 'ton';\n    }\n    return address.toString({ urlSafe: true });\n};\n","import { atom, useAtom } from '../../libs/atom';\nimport { useCallback } from 'react';\nimport { useSwapsConfig } from './useSwapsConfig';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { swapFromAsset$, swapToAsset$ } from './useSwapForm';\nimport { useAppContext } from '../../hooks/appContext';\nimport { generateStonfiSwapLink } from '../stonfi';\nconst swapMobileNotificationOpen$ = atom(false);\nexport const useSwapMobileNotification = () => {\n    const [isOpen, _setIsOpen] = useAtom(swapMobileNotificationOpen$);\n    const { isSwapsEnabled } = useSwapsConfig();\n    const sdk = useAppSdk();\n    const { tonendpoint, env } = useAppContext();\n    const setIsOpen = useCallback((val) => {\n        if (val && !isSwapsEnabled) {\n            const swapLink = generateStonfiSwapLink(swapFromAsset$.value.address, swapToAsset$.value.address, tonendpoint.targetEnv, env?.stonfiReferralAddress);\n            sdk.openPage(swapLink);\n        }\n        else {\n            _setIsOpen(val);\n        }\n    }, [_setIsOpen, isSwapsEnabled, sdk, tonendpoint.targetEnv, env?.stonfiReferralAddress]);\n    return [isOpen, setIsOpen];\n};\n","/* generated using openapi-typescript-codegen -- do not edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'CancelError';\n    }\n    get isCancelled() {\n        return true;\n    }\n}\nexport class CancelablePromise {\n    #isResolved;\n    #isRejected;\n    #isCancelled;\n    #cancelHandlers;\n    #promise;\n    #resolve;\n    #reject;\n    constructor(executor) {\n        this.#isResolved = false;\n        this.#isRejected = false;\n        this.#isCancelled = false;\n        this.#cancelHandlers = [];\n        this.#promise = new Promise((resolve, reject) => {\n            this.#resolve = resolve;\n            this.#reject = reject;\n            const onResolve = (value) => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#isResolved = true;\n                if (this.#resolve)\n                    this.#resolve(value);\n            };\n            const onReject = (reason) => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#isRejected = true;\n                if (this.#reject)\n                    this.#reject(reason);\n            };\n            const onCancel = (cancelHandler) => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#cancelHandlers.push(cancelHandler);\n            };\n            Object.defineProperty(onCancel, 'isResolved', {\n                get: () => this.#isResolved,\n            });\n            Object.defineProperty(onCancel, 'isRejected', {\n                get: () => this.#isRejected,\n            });\n            Object.defineProperty(onCancel, 'isCancelled', {\n                get: () => this.#isCancelled,\n            });\n            return executor(onResolve, onReject, onCancel);\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Cancellable Promise\";\n    }\n    then(onFulfilled, onRejected) {\n        return this.#promise.then(onFulfilled, onRejected);\n    }\n    catch(onRejected) {\n        return this.#promise.catch(onRejected);\n    }\n    finally(onFinally) {\n        return this.#promise.finally(onFinally);\n    }\n    cancel() {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n            return;\n        }\n        this.#isCancelled = true;\n        if (this.#cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this.#cancelHandlers) {\n                    cancelHandler();\n                }\n            }\n            catch (error) {\n                console.warn('Cancellation threw an error', error);\n                return;\n            }\n        }\n        this.#cancelHandlers.length = 0;\n        if (this.#reject)\n            this.#reject(new CancelError('Request aborted'));\n    }\n    get isCancelled() {\n        return this.#isCancelled;\n    }\n}\n","export const OpenAPI = {\n    BASE: '',\n    VERSION: '1.0.0',\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: 'include',\n    TOKEN: undefined,\n    USERNAME: undefined,\n    PASSWORD: undefined,\n    HEADERS: undefined,\n    ENCODE_PATH: undefined,\n};\n","export class ApiError extends Error {\n    url;\n    status;\n    statusText;\n    body;\n    request;\n    constructor(request, response, message) {\n        super(message);\n        this.name = 'ApiError';\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request;\n    }\n}\n","/* generated using openapi-typescript-codegen -- do not edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { ApiError } from './ApiError';\nimport { CancelablePromise } from './CancelablePromise';\nexport const isDefined = (value) => {\n    return value !== undefined && value !== null;\n};\nexport const isString = (value) => {\n    return typeof value === 'string';\n};\nexport const isStringWithValue = (value) => {\n    return isString(value) && value !== '';\n};\nexport const isBlob = (value) => {\n    return (typeof value === 'object' &&\n        typeof value.type === 'string' &&\n        typeof value.stream === 'function' &&\n        typeof value.arrayBuffer === 'function' &&\n        typeof value.constructor === 'function' &&\n        typeof value.constructor.name === 'string' &&\n        /^(Blob|File)$/.test(value.constructor.name) &&\n        /^(Blob|File)$/.test(value[Symbol.toStringTag]));\n};\nexport const isFormData = (value) => {\n    return value instanceof FormData;\n};\nexport const base64 = (str) => {\n    try {\n        return btoa(str);\n    }\n    catch (err) {\n        // @ts-ignore\n        return Buffer.from(str).toString('base64');\n    }\n};\nexport const getQueryString = (params) => {\n    const qs = [];\n    const append = (key, value) => {\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n    const process = (key, value) => {\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach(v => {\n                    process(key, v);\n                });\n            }\n            else if (typeof value === 'object') {\n                Object.entries(value).forEach(([k, v]) => {\n                    process(`${key}[${k}]`, v);\n                });\n            }\n            else {\n                append(key, value);\n            }\n        }\n    };\n    Object.entries(params).forEach(([key, value]) => {\n        process(key, value);\n    });\n    if (qs.length > 0) {\n        return `?${qs.join('&')}`;\n    }\n    return '';\n};\nconst getUrl = (config, options) => {\n    const encoder = config.ENCODE_PATH || encodeURI;\n    const path = options.url\n        .replace('{api-version}', config.VERSION)\n        .replace(/{(.*?)}/g, (substring, group) => {\n        if (options.path?.hasOwnProperty(group)) {\n            return encoder(String(options.path[group]));\n        }\n        return substring;\n    });\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\nexport const getFormData = (options) => {\n    if (options.formData) {\n        const formData = new FormData();\n        const process = (key, value) => {\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            }\n            else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n        Object.entries(options.formData)\n            .filter(([_, value]) => isDefined(value))\n            .forEach(([key, value]) => {\n            if (Array.isArray(value)) {\n                value.forEach(v => process(key, v));\n            }\n            else {\n                process(key, value);\n            }\n        });\n        return formData;\n    }\n    return undefined;\n};\nexport const resolve = async (options, resolver) => {\n    if (typeof resolver === 'function') {\n        return resolver(options);\n    }\n    return resolver;\n};\nexport const getHeaders = async (config, options) => {\n    const [token, username, password, additionalHeaders] = await Promise.all([\n        resolve(options, config.TOKEN),\n        resolve(options, config.USERNAME),\n        resolve(options, config.PASSWORD),\n        resolve(options, config.HEADERS),\n    ]);\n    const headers = Object.entries({\n        Accept: 'application/json',\n        ...additionalHeaders,\n        ...options.headers,\n    })\n        .filter(([_, value]) => isDefined(value))\n        .reduce((headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n    }), {});\n    if (isStringWithValue(token)) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers['Authorization'] = `Basic ${credentials}`;\n    }\n    if (options.body !== undefined) {\n        if (options.mediaType) {\n            headers['Content-Type'] = options.mediaType;\n        }\n        else if (isBlob(options.body)) {\n            headers['Content-Type'] = options.body.type || 'application/octet-stream';\n        }\n        else if (isString(options.body)) {\n            headers['Content-Type'] = 'text/plain';\n        }\n        else if (!isFormData(options.body)) {\n            headers['Content-Type'] = 'application/json';\n        }\n    }\n    return new Headers(headers);\n};\nexport const getRequestBody = (options) => {\n    if (options.body !== undefined) {\n        if (options.mediaType?.includes('/json')) {\n            return JSON.stringify(options.body);\n        }\n        else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\n            return options.body;\n        }\n        else {\n            return JSON.stringify(options.body);\n        }\n    }\n    return undefined;\n};\nexport const sendRequest = async (config, options, url, body, formData, headers, onCancel) => {\n    const controller = new AbortController();\n    const request = {\n        headers,\n        body: body ?? formData,\n        method: options.method,\n        signal: controller.signal,\n    };\n    if (config.WITH_CREDENTIALS) {\n        request.credentials = config.CREDENTIALS;\n    }\n    onCancel(() => controller.abort());\n    return await fetch(url, request);\n};\nexport const getResponseHeader = (response, responseHeader) => {\n    if (responseHeader) {\n        const content = response.headers.get(responseHeader);\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return undefined;\n};\nexport const getResponseBody = async (response) => {\n    if (response.status !== 204) {\n        try {\n            const contentType = response.headers.get('Content-Type');\n            if (contentType) {\n                const jsonTypes = ['application/json', 'application/problem+json'];\n                const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));\n                if (isJSON) {\n                    return await response.json();\n                }\n                else {\n                    return await response.text();\n                }\n            }\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }\n    return undefined;\n};\nexport const catchErrorCodes = (options, result) => {\n    const errors = {\n        400: 'Bad Request',\n        401: 'Unauthorized',\n        403: 'Forbidden',\n        404: 'Not Found',\n        500: 'Internal Server Error',\n        502: 'Bad Gateway',\n        503: 'Service Unavailable',\n        ...options.errors,\n    };\n    const error = errors[result.status];\n    if (error) {\n        throw new ApiError(options, result, error);\n    }\n    if (!result.ok) {\n        const errorStatus = result.status ?? 'unknown';\n        const errorStatusText = result.statusText ?? 'unknown';\n        const errorBody = (() => {\n            try {\n                return JSON.stringify(result.body, null, 2);\n            }\n            catch (e) {\n                return undefined;\n            }\n        })();\n        throw new ApiError(options, result, `Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`);\n    }\n};\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = (config, options) => {\n    return new CancelablePromise(async (resolve, reject, onCancel) => {\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options);\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n                const responseBody = await getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n                const result = {\n                    url,\n                    ok: response.ok,\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader ?? responseBody,\n                };\n                catchErrorCodes(options, result);\n                resolve(result.body);\n            }\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n};\n","import { OpenAPI } from '../core/OpenAPI';\nimport { request as __request } from '../core/request';\nexport class SwapService {\n    /**\n     * @param fromAsset\n     * @param toAsset\n     * @param fromAmount\n     * @param provider\n     * @param referral\n     * @returns any Default Response\n     * @throws ApiError\n     */\n    static calculateSwap(fromAsset, toAsset, fromAmount, provider, referral) {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/v2/swap/calculate',\n            query: {\n                'fromAsset': fromAsset,\n                'toAsset': toAsset,\n                'fromAmount': fromAmount,\n                'referral': referral,\n                'provider': provider,\n            },\n            errors: {\n                500: `Default Response`,\n            },\n        });\n    }\n    /**\n     * @param requestBody\n     * @returns any Default Response\n     * @throws ApiError\n     */\n    static encodeSwap(requestBody) {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/v2/swap/encode',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                500: `Default Response`,\n            },\n        });\n    }\n    /**\n     * @returns any Default Response\n     * @throws ApiError\n     */\n    static swapGas() {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/v2/swap/gas',\n            errors: {\n                500: `Default Response`,\n            },\n        });\n    }\n    /**\n     * @returns any Default Response\n     * @throws ApiError\n     */\n    static swapAssets() {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/v2/swap/assets',\n            errors: {\n                500: `Default Response`,\n            },\n        });\n    }\n}\n","import { useAppContext } from '../../hooks/appContext';\nimport { OpenAPI, SwapService } from '@tonkeeper/core/dist/swapsApi';\nexport const useSwapsConfig = () => {\n    const { config } = useAppContext();\n    OpenAPI.BASE = config.web_swaps_url;\n    return {\n        swapService: SwapService,\n        referralAddress: config.web_swaps_referral_address,\n        isSwapsEnabled: !!config.web_swaps_url\n    };\n};\n"],"names":["eqAddresses","address1","address2","Address","parse","equals","e","Atom","value","this","_value","constructor","_defineProperty","subscribe","fn","subscribers","push","filter","sub","next","forEach","atom","useAtom","a","setValue","useState","useEffect","v","useCallback","newValue","swapFromAsset$","TON_ASSET","swapToAsset$","TON_USDT_ASSET","swapAmount$","BigNumber","useSwapFromAsset","fromAsset","_setFromAsset","_","_setToAsset","asset","address","useSwapToAsset","toAsset","useSwapFromAmount","useMaxSwapValue","data","swapGas","isError","useSwapGasConfig","balance","useAssetWeiBalance","useQuery","queryKey","QueryKey","swapMaxValue","id","toFixed","queryFn","async","dedustGas","dedust","tonToJetton","stonfiGas","stonfi","balanceWithoutFee","minus","max","lt","enabled","undefined","swapService","useSwapsConfig","swapGasConfig","selectedSwap$","useSelectedSwap","useSwapPriceImpact","selectedSwap","fromAssetRate","isLoading","fromAssetRateLoading","useRate","tonAssetAddressToString","toAssetRate","toAssetRateLoading","trade","prices","fromFiat","from","relativeAmount","multipliedBy","toFiat","to","isEqualTo","dividedBy","priceImpactStatus","priceImpact","isGreaterThan","useIsSwapFormNotCompleted","fromAmount","isZero","generateStonfiSwapLink","fromToken","toToken","targetEnv","referralAddress","url","URL","searchParams","append","addressToStonfiAddress","concat","toString","isTon","urlSafe","swapMobileNotificationOpen$","useSwapMobileNotification","isOpen","_setIsOpen","isSwapsEnabled","sdk","useAppSdk","tonendpoint","env","useAppContext","val","swapLink","stonfiReferralAddress","openPage","CancelError","Error","message","super","name","isCancelled","_isResolved","WeakMap","_isRejected","_isCancelled","_cancelHandlers","_promise","_resolve","_reject","_Symbol$toStringTag","Symbol","toStringTag","CancelablePromise","executor","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","Promise","resolve","reject","onCancel","cancelHandler","_classPrivateFieldGet","Object","defineProperty","get","call","reason","then","onFulfilled","onRejected","catch","finally","onFinally","cancel","length","error","console","warn","OpenAPI","BASE","VERSION","WITH_CREDENTIALS","CREDENTIALS","TOKEN","USERNAME","PASSWORD","HEADERS","ENCODE_PATH","ApiError","request","response","status","statusText","body","isDefined","isString","isStringWithValue","isBlob","type","stream","arrayBuffer","test","isFormData","FormData","getQueryString","params","qs","process","key","Array","isArray","entries","_ref","k","encodeURIComponent","String","_ref2","join","options","resolver","getHeaders","config","token","username","password","additionalHeaders","all","headers","Accept","_ref5","reduce","_ref6","credentials","str","btoa","err","Buffer","base64","mediaType","Headers","getUrl","encoder","encodeURI","path","replace","substring","group","_options$path","hasOwnProperty","query","formData","JSON","stringify","_ref3","_ref4","getFormData","_options$mediaType","includes","getRequestBody","controller","AbortController","method","signal","abort","fetch","sendRequest","responseBody","contentType","some","toLowerCase","startsWith","json","text","getResponseBody","responseHeader","getResponseHeader","content","result","ok","catchErrorCodes","errors","_result$status","_result$statusText","errorStatus","errorStatusText","errorBody","SwapService","calculateSwap","provider","referral","__request","encodeSwap","requestBody","swapAssets","web_swaps_url","web_swaps_referral_address"],"sourceRoot":""}