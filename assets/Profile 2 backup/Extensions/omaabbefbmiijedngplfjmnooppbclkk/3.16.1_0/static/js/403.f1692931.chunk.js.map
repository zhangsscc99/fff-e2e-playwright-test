{"version":3,"file":"static/js/403.f1692931.chunk.js","mappings":"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","sources":["../../../packages/uikit/dist/components/home/AccountView.js","../../../packages/uikit/dist/components/home/ReceiveNotification.js","../../../packages/uikit/dist/components/home/qrCodeView.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { BLOCKCHAIN_NAME } from '@tonkeeper/core/dist/entries/crypto';\nimport { formatAddress, formatTransferUrl } from '@tonkeeper/core/dist/utils/common';\nimport { useRef, useState } from 'react';\nimport { QRCode } from 'react-qrcode-logo';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport styled, { css } from 'styled-components';\nimport { useAppContext, useWalletContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { useTranslation } from '../../hooks/translation';\nimport { useTronWalletState } from '../../state/tron/tron';\nimport { CopyIcon } from '../Icon';\nimport { FullHeightBlockResponsive, NotificationBlock, NotificationHeader, NotificationHeaderPortal, NotificationTitleRow } from '../Notification';\nimport { Body1, H3 } from '../Text';\nimport { Button } from '../fields/Button';\nimport { Wrapper, childFactoryCreator, duration } from '../transfer/common';\nimport { QrWrapper } from './qrCodeView';\nconst CopyBlock = styled.div `\n    display: flex;\n    align-items: center;\n`;\nexport const Background = styled.div `\n    padding: 20px;\n    width: 100%;\n    box-sizing: border-box;\n    border-radius: 20px;\n    background: white;\n    max-width: 300px;\n\n    ${props => props.margin &&\n    css `\n            margin-bottom: 16px;\n        `}\n\n    ${props => props.extension &&\n    css `\n            @media (max-width: 768px) {\n                max-width: 217px;\n                padding: 16px;\n            }\n        `}\n\n    canvas {\n        width: 100% !important;\n        height: 100% !important;\n        position: absolute;\n    }\n`;\nexport const AddressText = styled(Body1) `\n    display: inline-block;\n    word-break: break-all;\n    color: black;\n    margin: 16px 4px 0;\n    text-align: center;\n    ${props => props.extension &&\n    css `\n            @media (max-width: 768px) {\n                margin-top: 8px;\n            }\n        `}\n`;\nconst TextBlock = styled.div `\n    display: flex;\n    padding-bottom: 16px;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n\n    ${props => props.extension &&\n    css `\n            @media (max-width: 768px) {\n                padding-bottom: 0;\n            }\n        `}\n`;\nconst Title = styled(H3) `\n    text-align: center;\n`;\nconst Description = styled(Body1) `\n    text-align: center;\n    color: ${props => props.theme.textSecondary};\n`;\nconst values = [\n    { name: BLOCKCHAIN_NAME.TON, id: BLOCKCHAIN_NAME.TON },\n    { name: 'TRC20', id: BLOCKCHAIN_NAME.TRON }\n];\nexport const HeaderBlock = ({ title, description }) => {\n    const { extension } = useAppContext();\n    return (_jsxs(TextBlock, { extension: extension, children: [title && _jsx(Title, { children: title }), _jsx(Description, { children: description })] }));\n};\nconst CopyButton = ({ address }) => {\n    const sdk = useAppSdk();\n    const { t } = useTranslation();\n    return (_jsx(CopyBlock, { children: _jsxs(Button, { secondary: true, onClick: e => {\n                e.preventDefault();\n                sdk.copyToClipboard(address, t('address_copied'));\n            }, children: [_jsx(CopyIcon, {}), _jsx(\"span\", { children: t('Copy_address') })] }) }));\n};\nconst ReceiveTon = ({ jetton }) => {\n    const sdk = useAppSdk();\n    const { extension } = useAppContext();\n    const wallet = useWalletContext();\n    const { t } = useTranslation();\n    const address = formatAddress(wallet.active.rawAddress, wallet.network);\n    return (_jsxs(NotificationBlock, { children: [_jsx(HeaderBlock, { title: t('receive_ton'), description: t('receive_ton_description') }), _jsxs(Background, { extension: extension, onClick: e => {\n                    e.preventDefault();\n                    sdk.copyToClipboard(address, t('address_copied'));\n                }, children: [_jsx(QrWrapper, { children: _jsx(QRCode, { size: 400, value: formatTransferUrl({\n                                address,\n                                jetton\n                            }), logoImage: \"https://wallet.tonkeeper.com/img/toncoin.svg\", logoPadding: 8, qrStyle: \"dots\", eyeRadius: {\n                                inner: 2,\n                                outer: 16\n                            } }) }), _jsx(AddressText, { extension: extension, children: address })] }), _jsx(CopyButton, { address: address })] }));\n};\nconst ReceiveTron = ({ tron }) => {\n    const sdk = useAppSdk();\n    const { t } = useTranslation();\n    const { extension } = useAppContext();\n    return (_jsxs(NotificationBlock, { children: [_jsx(HeaderBlock, { title: t('receive_trc20'), description: t('receive_trc20_description') }), _jsxs(Background, { extension: extension, onClick: e => {\n                    e.preventDefault();\n                    sdk.copyToClipboard(tron.walletAddress, t('address_copied'));\n                }, children: [_jsx(QrWrapper, { children: _jsx(QRCode, { size: 400, value: tron.walletAddress, logoImage: \"https://wallet-dev.tonkeeper.com/img/usdt.svg\", logoPadding: 8, qrStyle: \"dots\", eyeRadius: {\n                                inner: 2,\n                                outer: 16\n                            } }) }), _jsx(AddressText, { extension: extension, children: tron.walletAddress })] }), _jsx(CopyButton, { address: tron.walletAddress })] }));\n};\nexport const ReceiveContent = ({ chain = BLOCKCHAIN_NAME.TON, jetton, handleClose }) => {\n    const { standalone } = useAppContext();\n    const [active, setActive] = useState(chain);\n    const { data: tron } = useTronWalletState(active === BLOCKCHAIN_NAME.TRON);\n    const tonRef = useRef(null);\n    const tronRef = useRef(null);\n    const isTon = active === BLOCKCHAIN_NAME.TON || !tron;\n    const nodeRef = isTon ? tonRef : tronRef;\n    const state = isTon ? 'ton' : 'tron';\n    return (_jsxs(FullHeightBlockResponsive, { standalone: standalone, children: [_jsx(NotificationHeaderPortal, { children: _jsx(NotificationHeader, { children: _jsx(NotificationTitleRow, { handleClose: handleClose, center: true }) }) }), _jsx(Wrapper, { standalone: false, extension: true, fullWidth: true, children: _jsx(TransitionGroup, { childFactory: childFactoryCreator(!isTon), children: _jsx(CSSTransition, { nodeRef: nodeRef, classNames: \"right-to-left\", addEndListener: done => {\n                            setTimeout(done, duration);\n                        }, children: _jsx(\"div\", { ref: nodeRef, children: isTon ? _jsx(ReceiveTon, { jetton: jetton }) : _jsx(ReceiveTron, { tron: tron }) }) }, state) }) })] }));\n};\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { Notification } from '../Notification';\nimport { ReceiveContent } from './AccountView';\nconst ReceiveNotification = () => {\n    const sdk = useAppSdk();\n    const [params, setParams] = useState(undefined);\n    const handleClose = () => {\n        setParams(undefined);\n    };\n    useEffect(() => {\n        const handler = (options) => {\n            setParams(options.params);\n        };\n        sdk.uiEvents.on('receive', handler);\n        return () => {\n            sdk.uiEvents.off('receive', handler);\n        };\n    }, []);\n    const Content = useCallback(() => {\n        if (!params)\n            return undefined;\n        return (_jsx(ReceiveContent, { chain: params.chain, jetton: params.jetton, handleClose: handleClose }));\n    }, [params, handleClose]);\n    return (_jsx(Notification, { isOpen: params != undefined, handleClose: handleClose, backShadow: true, hideButton: true, children: Content }));\n};\nexport default ReceiveNotification;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport UREncoder from '@ngraveio/bc-ur/dist/urEncoder';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { QRCode } from 'react-qrcode-logo';\nimport { styled } from 'styled-components';\nexport const QrWrapper = styled.div `\n    width: 100%;\n    padding-bottom: 100%;\n    position: relative;\n`;\nfunction chunks(arr, len) {\n    var chunks = [], i = 0, n = arr.length;\n    while (i < n) {\n        chunks.push(arr.slice(i, (i += len)));\n    }\n    return chunks;\n}\nexport const AnimatedQrCode = React.memo(({ message }) => {\n    const [value, setValue] = useState('');\n    useEffect(() => {\n        let arr = [...message];\n        const items = chunks(arr, 256);\n        if (items.length === 1) {\n            setValue(message);\n        }\n        else {\n            let count = 0;\n            setInterval(() => {\n                let current = items[count];\n                setValue(current.join(''));\n                // increment our counter\n                count++;\n                // reset counter if we reach end of array\n                if (count === items.length) {\n                    count = 0;\n                }\n            }, 100);\n        }\n    }, [message]);\n    return (_jsx(QrWrapper, { children: _jsx(QRCode, { size: 400, value: value, qrStyle: \"dots\", eyeRadius: {\n                inner: 2,\n                outer: 16\n            } }) }));\n});\nexport const KeystoneAnimatedQRCode = ({ data }) => {\n    const urEncoder = useMemo(() => {\n        return new UREncoder(data);\n    }, []);\n    const [value, setValue] = useState(urEncoder.nextPart());\n    useEffect(() => {\n        const interval = setInterval(() => {\n            setValue(urEncoder.nextPart().toUpperCase());\n        }, 200);\n        return () => {\n            clearInterval(interval);\n        };\n    }, []);\n    return (_jsx(QrWrapper, { children: _jsx(QRCode, { size: 400, value: value, qrStyle: \"dots\", eyeRadius: {\n                inner: 2,\n                outer: 16\n            } }) }));\n};\n"],"names":["CopyBlock","styled","div","_templateObject","_taggedTemplateLiteral","Background","_templateObject2","props","margin","css","_templateObject3","extension","_templateObject4","AddressText","Body1","_templateObject5","_templateObject6","TextBlock","_templateObject7","_templateObject8","Title","H3","_templateObject9","Description","_templateObject10","theme","textSecondary","HeaderBlock","BLOCKCHAIN_NAME","TON","TRON","_ref","title","description","useAppContext","_jsxs","children","_jsx","CopyButton","_ref2","address","sdk","useAppSdk","t","useTranslation","Button","secondary","onClick","e","preventDefault","copyToClipboard","CopyIcon","ReceiveTon","_ref3","jetton","wallet","useWalletContext","formatAddress","active","rawAddress","network","NotificationBlock","QrWrapper","QRCode","size","value","formatTransferUrl","logoImage","logoPadding","qrStyle","eyeRadius","inner","outer","ReceiveTron","_ref4","tron","walletAddress","ReceiveContent","_ref5","chain","handleClose","standalone","setActive","useState","data","useTronWalletState","tonRef","useRef","tronRef","isTon","nodeRef","state","FullHeightBlockResponsive","NotificationHeaderPortal","NotificationHeader","NotificationTitleRow","center","Wrapper","fullWidth","TransitionGroup","childFactory","childFactoryCreator","CSSTransition","classNames","addEndListener","done","setTimeout","duration","ref","ReceiveNotification","params","setParams","undefined","useEffect","handler","options","uiEvents","on","off","Content","useCallback","Notification","isOpen","backShadow","hideButton","React","message","setValue","items","arr","len","chunks","i","n","length","push","slice","count","setInterval","current","join","KeystoneAnimatedQRCode","urEncoder","useMemo","UREncoder","nextPart","interval","toUpperCase","clearInterval"],"sourceRoot":""}