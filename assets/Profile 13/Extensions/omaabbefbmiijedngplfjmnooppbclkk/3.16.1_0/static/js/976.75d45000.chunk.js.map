{"version":3,"file":"static/js/976.75d45000.chunk.js","mappings":"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","sources":["../../../packages/core/dist/utils/address.js","../../../packages/uikit/dist/state/swap/useSwapForm.js","../../../packages/uikit/dist/state/stonfi.js","../../../packages/uikit/dist/state/swap/useSwapMobileNotification.js","../../../packages/core/dist/swapsApi/core/CancelablePromise.js","../../../packages/core/dist/swapsApi/core/OpenAPI.js","../../../packages/core/dist/swapsApi/core/ApiError.js","../../../packages/core/dist/swapsApi/core/request.js","../../../packages/core/dist/swapsApi/services/SwapService.js","../../../packages/uikit/dist/state/swap/useSwapsConfig.js"],"sourcesContent":["import { Address } from '@ton/core';\nexport function eqAddresses(address1, address2) {\n    if (address1 && address1 === address2) {\n        return true;\n    }\n    try {\n        if (!address2) {\n            return false;\n        }\n        if (typeof address1 === 'string') {\n            address1 = Address.parse(address1);\n        }\n        if (typeof address2 === 'string') {\n            address2 = Address.parse(address2);\n        }\n        return address1.equals(address2);\n    }\n    catch (e) {\n        return false;\n    }\n}\n","import { TON_ASSET, TON_USDT_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { tonAssetAddressToString } from '@tonkeeper/core/dist/entries/crypto/asset/ton-asset';\nimport BigNumber from 'bignumber.js';\nimport { atom, useAtom } from '../../libs/atom';\nimport { useQuery } from '@tanstack/react-query';\nimport { QueryKey } from '../../libs/queryKey';\nimport { useAssetWeiBalance } from '../home';\nimport { useRate } from '../rates';\nimport { useSwapsConfig } from './useSwapsConfig';\nimport { useCallback } from 'react';\nimport { eqAddresses } from '@tonkeeper/core/dist/utils/address';\nexport const swapFromAsset$ = atom(TON_ASSET);\nexport const swapToAsset$ = atom(TON_USDT_ASSET);\nexport const swapAmount$ = atom(new BigNumber(1));\nexport const useSwapFromAsset = () => {\n    const [fromAsset, _setFromAsset] = useAtom(swapFromAsset$);\n    const [_, _setToAsset] = useAtom(swapToAsset$);\n    const setFromAsset = useCallback((asset) => {\n        if (eqAddresses(asset.address, swapToAsset$.value.address)) {\n            _setToAsset(swapFromAsset$.value);\n        }\n        _setFromAsset(asset);\n    }, [_setFromAsset, _setToAsset]);\n    return [fromAsset, setFromAsset];\n};\nexport const useSwapToAsset = () => {\n    const [toAsset, _setToAsset] = useAtom(swapToAsset$);\n    const [_, _setFromAsset] = useAtom(swapFromAsset$);\n    const setToAsset = useCallback((asset) => {\n        if (eqAddresses(asset.address, swapFromAsset$.value.address)) {\n            _setFromAsset(swapToAsset$.value);\n        }\n        _setToAsset(asset);\n    }, [_setToAsset, _setFromAsset]);\n    return [toAsset, setToAsset];\n};\nexport const useSwapFromAmount = () => {\n    return useAtom(swapAmount$);\n};\nexport const useMaxSwapValue = () => {\n    const TON_GAS_SAFETY_NANO_CONST = 1000000;\n    const { data: swapGas, isError } = useSwapGasConfig();\n    const [fromAsset] = useSwapFromAsset();\n    const balance = useAssetWeiBalance(fromAsset);\n    return useQuery({\n        queryKey: [QueryKey.swapMaxValue, swapGas, fromAsset.id, balance?.toFixed(0)],\n        queryFn: async () => {\n            if (isError) {\n                return balance;\n            }\n            if (!balance || !swapGas) {\n                return undefined;\n            }\n            if (fromAsset.id === TON_ASSET.id) {\n                const dedustGas = new BigNumber(swapGas.dedust.tonToJetton);\n                const stonfiGas = new BigNumber(swapGas.stonfi.tonToJetton);\n                const balanceWithoutFee = balance\n                    .minus(BigNumber.max(dedustGas, stonfiGas))\n                    .minus(TON_GAS_SAFETY_NANO_CONST);\n                if (balanceWithoutFee.lt(0)) {\n                    return new BigNumber(0);\n                }\n                return balanceWithoutFee;\n            }\n            else {\n                return balance;\n            }\n        },\n        enabled: (!!swapGas || isError) && balance !== undefined\n    });\n};\nexport const useSwapGasConfig = () => {\n    const { swapService } = useSwapsConfig();\n    return useQuery({\n        queryKey: [QueryKey.swapGasConfig],\n        queryFn: async () => {\n            return swapService.swapGas();\n        }\n    });\n};\nexport const selectedSwap$ = atom(undefined);\nexport const useSelectedSwap = () => {\n    return useAtom(selectedSwap$);\n};\nexport const useSwapPriceImpact = () => {\n    const [fromAsset] = useSwapFromAsset();\n    const [toAsset] = useSwapToAsset();\n    const [selectedSwap] = useSelectedSwap();\n    const { data: fromAssetRate, isLoading: fromAssetRateLoading } = useRate(tonAssetAddressToString(fromAsset.address));\n    const { data: toAssetRate, isLoading: toAssetRateLoading } = useRate(tonAssetAddressToString(toAsset.address));\n    const trade = selectedSwap?.trade;\n    if (!trade || toAssetRateLoading || fromAssetRateLoading) {\n        return undefined;\n    }\n    if (!fromAssetRate?.prices || !toAssetRate?.prices) {\n        return null;\n    }\n    const fromFiat = new BigNumber(trade.from.relativeAmount).multipliedBy(fromAssetRate.prices);\n    const toFiat = new BigNumber(trade.to.relativeAmount).multipliedBy(toAssetRate.prices);\n    if (fromFiat.isEqualTo(toFiat)) {\n        return new BigNumber(0);\n    }\n    return fromFiat.minus(toFiat).dividedBy(fromFiat);\n};\nexport const priceImpactStatus = (priceImpact) => {\n    if (!priceImpact)\n        return 'unknown';\n    if (priceImpact.isGreaterThan(0.05))\n        return 'high';\n    if (priceImpact.isGreaterThan(0.01))\n        return 'medium';\n    return 'low';\n};\nexport const useIsSwapFormNotCompleted = () => {\n    const [fromAmount] = useSwapFromAmount();\n    return !fromAmount || fromAmount.isZero();\n};\n","import { useAppContext } from '../hooks/appContext';\nimport { isTon } from '@tonkeeper/core/dist/entries/crypto/asset/ton-asset';\nexport const useStonfiSwapLink = (fromToken, toToken) => {\n    const { tonendpoint, env } = useAppContext();\n    return generateStonfiSwapLink(fromToken, toToken, tonendpoint.targetEnv, env?.stonfiReferralAddress);\n};\nexport const generateStonfiSwapLink = (fromToken, toToken, targetEnv, referralAddress) => {\n    const url = new URL('https://app.ston.fi/swap');\n    url.searchParams.append('ft', addressToStonfiAddress(fromToken));\n    url.searchParams.append('tt', addressToStonfiAddress(toToken));\n    url.searchParams.append('referral_address', referralAddress || '');\n    url.searchParams.append('utm_source', `tokeeper-${targetEnv}`);\n    url.searchParams.append('utm_medium', 'organic');\n    url.searchParams.append('utm_campaign', 'swap_button');\n    url.searchParams.append('utm_content', 'TODO');\n    return url.toString();\n};\nconst addressToStonfiAddress = (address) => {\n    if (isTon(address)) {\n        return 'ton';\n    }\n    return address.toString({ urlSafe: true });\n};\n","import { atom, useAtom } from '../../libs/atom';\nimport { useCallback } from 'react';\nimport { useSwapsConfig } from './useSwapsConfig';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { swapFromAsset$, swapToAsset$ } from './useSwapForm';\nimport { useAppContext } from '../../hooks/appContext';\nimport { generateStonfiSwapLink } from '../stonfi';\nconst swapMobileNotificationOpen$ = atom(false);\nexport const useSwapMobileNotification = () => {\n    const [isOpen, _setIsOpen] = useAtom(swapMobileNotificationOpen$);\n    const { isSwapsEnabled } = useSwapsConfig();\n    const sdk = useAppSdk();\n    const { tonendpoint, env } = useAppContext();\n    const setIsOpen = useCallback((val) => {\n        if (val && !isSwapsEnabled) {\n            const swapLink = generateStonfiSwapLink(swapFromAsset$.value.address, swapToAsset$.value.address, tonendpoint.targetEnv, env?.stonfiReferralAddress);\n            sdk.openPage(swapLink);\n        }\n        else {\n            _setIsOpen(val);\n        }\n    }, [_setIsOpen, isSwapsEnabled, sdk, tonendpoint.targetEnv, env?.stonfiReferralAddress]);\n    return [isOpen, setIsOpen];\n};\n","/* generated using openapi-typescript-codegen -- do not edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nexport class CancelError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'CancelError';\n    }\n    get isCancelled() {\n        return true;\n    }\n}\nexport class CancelablePromise {\n    #isResolved;\n    #isRejected;\n    #isCancelled;\n    #cancelHandlers;\n    #promise;\n    #resolve;\n    #reject;\n    constructor(executor) {\n        this.#isResolved = false;\n        this.#isRejected = false;\n        this.#isCancelled = false;\n        this.#cancelHandlers = [];\n        this.#promise = new Promise((resolve, reject) => {\n            this.#resolve = resolve;\n            this.#reject = reject;\n            const onResolve = (value) => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#isResolved = true;\n                if (this.#resolve)\n                    this.#resolve(value);\n            };\n            const onReject = (reason) => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#isRejected = true;\n                if (this.#reject)\n                    this.#reject(reason);\n            };\n            const onCancel = (cancelHandler) => {\n                if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n                    return;\n                }\n                this.#cancelHandlers.push(cancelHandler);\n            };\n            Object.defineProperty(onCancel, 'isResolved', {\n                get: () => this.#isResolved,\n            });\n            Object.defineProperty(onCancel, 'isRejected', {\n                get: () => this.#isRejected,\n            });\n            Object.defineProperty(onCancel, 'isCancelled', {\n                get: () => this.#isCancelled,\n            });\n            return executor(onResolve, onReject, onCancel);\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"Cancellable Promise\";\n    }\n    then(onFulfilled, onRejected) {\n        return this.#promise.then(onFulfilled, onRejected);\n    }\n    catch(onRejected) {\n        return this.#promise.catch(onRejected);\n    }\n    finally(onFinally) {\n        return this.#promise.finally(onFinally);\n    }\n    cancel() {\n        if (this.#isResolved || this.#isRejected || this.#isCancelled) {\n            return;\n        }\n        this.#isCancelled = true;\n        if (this.#cancelHandlers.length) {\n            try {\n                for (const cancelHandler of this.#cancelHandlers) {\n                    cancelHandler();\n                }\n            }\n            catch (error) {\n                console.warn('Cancellation threw an error', error);\n                return;\n            }\n        }\n        this.#cancelHandlers.length = 0;\n        if (this.#reject)\n            this.#reject(new CancelError('Request aborted'));\n    }\n    get isCancelled() {\n        return this.#isCancelled;\n    }\n}\n","export const OpenAPI = {\n    BASE: '',\n    VERSION: '1.0.0',\n    WITH_CREDENTIALS: false,\n    CREDENTIALS: 'include',\n    TOKEN: undefined,\n    USERNAME: undefined,\n    PASSWORD: undefined,\n    HEADERS: undefined,\n    ENCODE_PATH: undefined,\n};\n","export class ApiError extends Error {\n    url;\n    status;\n    statusText;\n    body;\n    request;\n    constructor(request, response, message) {\n        super(message);\n        this.name = 'ApiError';\n        this.url = response.url;\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n        this.request = request;\n    }\n}\n","/* generated using openapi-typescript-codegen -- do not edit */\n/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport { ApiError } from './ApiError';\nimport { CancelablePromise } from './CancelablePromise';\nexport const isDefined = (value) => {\n    return value !== undefined && value !== null;\n};\nexport const isString = (value) => {\n    return typeof value === 'string';\n};\nexport const isStringWithValue = (value) => {\n    return isString(value) && value !== '';\n};\nexport const isBlob = (value) => {\n    return (typeof value === 'object' &&\n        typeof value.type === 'string' &&\n        typeof value.stream === 'function' &&\n        typeof value.arrayBuffer === 'function' &&\n        typeof value.constructor === 'function' &&\n        typeof value.constructor.name === 'string' &&\n        /^(Blob|File)$/.test(value.constructor.name) &&\n        /^(Blob|File)$/.test(value[Symbol.toStringTag]));\n};\nexport const isFormData = (value) => {\n    return value instanceof FormData;\n};\nexport const base64 = (str) => {\n    try {\n        return btoa(str);\n    }\n    catch (err) {\n        // @ts-ignore\n        return Buffer.from(str).toString('base64');\n    }\n};\nexport const getQueryString = (params) => {\n    const qs = [];\n    const append = (key, value) => {\n        qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);\n    };\n    const process = (key, value) => {\n        if (isDefined(value)) {\n            if (Array.isArray(value)) {\n                value.forEach(v => {\n                    process(key, v);\n                });\n            }\n            else if (typeof value === 'object') {\n                Object.entries(value).forEach(([k, v]) => {\n                    process(`${key}[${k}]`, v);\n                });\n            }\n            else {\n                append(key, value);\n            }\n        }\n    };\n    Object.entries(params).forEach(([key, value]) => {\n        process(key, value);\n    });\n    if (qs.length > 0) {\n        return `?${qs.join('&')}`;\n    }\n    return '';\n};\nconst getUrl = (config, options) => {\n    const encoder = config.ENCODE_PATH || encodeURI;\n    const path = options.url\n        .replace('{api-version}', config.VERSION)\n        .replace(/{(.*?)}/g, (substring, group) => {\n        if (options.path?.hasOwnProperty(group)) {\n            return encoder(String(options.path[group]));\n        }\n        return substring;\n    });\n    const url = `${config.BASE}${path}`;\n    if (options.query) {\n        return `${url}${getQueryString(options.query)}`;\n    }\n    return url;\n};\nexport const getFormData = (options) => {\n    if (options.formData) {\n        const formData = new FormData();\n        const process = (key, value) => {\n            if (isString(value) || isBlob(value)) {\n                formData.append(key, value);\n            }\n            else {\n                formData.append(key, JSON.stringify(value));\n            }\n        };\n        Object.entries(options.formData)\n            .filter(([_, value]) => isDefined(value))\n            .forEach(([key, value]) => {\n            if (Array.isArray(value)) {\n                value.forEach(v => process(key, v));\n            }\n            else {\n                process(key, value);\n            }\n        });\n        return formData;\n    }\n    return undefined;\n};\nexport const resolve = async (options, resolver) => {\n    if (typeof resolver === 'function') {\n        return resolver(options);\n    }\n    return resolver;\n};\nexport const getHeaders = async (config, options) => {\n    const [token, username, password, additionalHeaders] = await Promise.all([\n        resolve(options, config.TOKEN),\n        resolve(options, config.USERNAME),\n        resolve(options, config.PASSWORD),\n        resolve(options, config.HEADERS),\n    ]);\n    const headers = Object.entries({\n        Accept: 'application/json',\n        ...additionalHeaders,\n        ...options.headers,\n    })\n        .filter(([_, value]) => isDefined(value))\n        .reduce((headers, [key, value]) => ({\n        ...headers,\n        [key]: String(value),\n    }), {});\n    if (isStringWithValue(token)) {\n        headers['Authorization'] = `Bearer ${token}`;\n    }\n    if (isStringWithValue(username) && isStringWithValue(password)) {\n        const credentials = base64(`${username}:${password}`);\n        headers['Authorization'] = `Basic ${credentials}`;\n    }\n    if (options.body !== undefined) {\n        if (options.mediaType) {\n            headers['Content-Type'] = options.mediaType;\n        }\n        else if (isBlob(options.body)) {\n            headers['Content-Type'] = options.body.type || 'application/octet-stream';\n        }\n        else if (isString(options.body)) {\n            headers['Content-Type'] = 'text/plain';\n        }\n        else if (!isFormData(options.body)) {\n            headers['Content-Type'] = 'application/json';\n        }\n    }\n    return new Headers(headers);\n};\nexport const getRequestBody = (options) => {\n    if (options.body !== undefined) {\n        if (options.mediaType?.includes('/json')) {\n            return JSON.stringify(options.body);\n        }\n        else if (isString(options.body) || isBlob(options.body) || isFormData(options.body)) {\n            return options.body;\n        }\n        else {\n            return JSON.stringify(options.body);\n        }\n    }\n    return undefined;\n};\nexport const sendRequest = async (config, options, url, body, formData, headers, onCancel) => {\n    const controller = new AbortController();\n    const request = {\n        headers,\n        body: body ?? formData,\n        method: options.method,\n        signal: controller.signal,\n    };\n    if (config.WITH_CREDENTIALS) {\n        request.credentials = config.CREDENTIALS;\n    }\n    onCancel(() => controller.abort());\n    return await fetch(url, request);\n};\nexport const getResponseHeader = (response, responseHeader) => {\n    if (responseHeader) {\n        const content = response.headers.get(responseHeader);\n        if (isString(content)) {\n            return content;\n        }\n    }\n    return undefined;\n};\nexport const getResponseBody = async (response) => {\n    if (response.status !== 204) {\n        try {\n            const contentType = response.headers.get('Content-Type');\n            if (contentType) {\n                const jsonTypes = ['application/json', 'application/problem+json'];\n                const isJSON = jsonTypes.some(type => contentType.toLowerCase().startsWith(type));\n                if (isJSON) {\n                    return await response.json();\n                }\n                else {\n                    return await response.text();\n                }\n            }\n        }\n        catch (error) {\n            console.error(error);\n        }\n    }\n    return undefined;\n};\nexport const catchErrorCodes = (options, result) => {\n    const errors = {\n        400: 'Bad Request',\n        401: 'Unauthorized',\n        403: 'Forbidden',\n        404: 'Not Found',\n        500: 'Internal Server Error',\n        502: 'Bad Gateway',\n        503: 'Service Unavailable',\n        ...options.errors,\n    };\n    const error = errors[result.status];\n    if (error) {\n        throw new ApiError(options, result, error);\n    }\n    if (!result.ok) {\n        const errorStatus = result.status ?? 'unknown';\n        const errorStatusText = result.statusText ?? 'unknown';\n        const errorBody = (() => {\n            try {\n                return JSON.stringify(result.body, null, 2);\n            }\n            catch (e) {\n                return undefined;\n            }\n        })();\n        throw new ApiError(options, result, `Generic Error: status: ${errorStatus}; status text: ${errorStatusText}; body: ${errorBody}`);\n    }\n};\n/**\n * Request method\n * @param config The OpenAPI configuration object\n * @param options The request options from the service\n * @returns CancelablePromise<T>\n * @throws ApiError\n */\nexport const request = (config, options) => {\n    return new CancelablePromise(async (resolve, reject, onCancel) => {\n        try {\n            const url = getUrl(config, options);\n            const formData = getFormData(options);\n            const body = getRequestBody(options);\n            const headers = await getHeaders(config, options);\n            if (!onCancel.isCancelled) {\n                const response = await sendRequest(config, options, url, body, formData, headers, onCancel);\n                const responseBody = await getResponseBody(response);\n                const responseHeader = getResponseHeader(response, options.responseHeader);\n                const result = {\n                    url,\n                    ok: response.ok,\n                    status: response.status,\n                    statusText: response.statusText,\n                    body: responseHeader ?? responseBody,\n                };\n                catchErrorCodes(options, result);\n                resolve(result.body);\n            }\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n};\n","import { OpenAPI } from '../core/OpenAPI';\nimport { request as __request } from '../core/request';\nexport class SwapService {\n    /**\n     * @param fromAsset\n     * @param toAsset\n     * @param fromAmount\n     * @param provider\n     * @param referral\n     * @returns any Default Response\n     * @throws ApiError\n     */\n    static calculateSwap(fromAsset, toAsset, fromAmount, provider, referral) {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/v2/swap/calculate',\n            query: {\n                'fromAsset': fromAsset,\n                'toAsset': toAsset,\n                'fromAmount': fromAmount,\n                'referral': referral,\n                'provider': provider,\n            },\n            errors: {\n                500: `Default Response`,\n            },\n        });\n    }\n    /**\n     * @param requestBody\n     * @returns any Default Response\n     * @throws ApiError\n     */\n    static encodeSwap(requestBody) {\n        return __request(OpenAPI, {\n            method: 'POST',\n            url: '/v2/swap/encode',\n            body: requestBody,\n            mediaType: 'application/json',\n            errors: {\n                500: `Default Response`,\n            },\n        });\n    }\n    /**\n     * @returns any Default Response\n     * @throws ApiError\n     */\n    static swapGas() {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/v2/swap/gas',\n            errors: {\n                500: `Default Response`,\n            },\n        });\n    }\n    /**\n     * @returns any Default Response\n     * @throws ApiError\n     */\n    static swapAssets() {\n        return __request(OpenAPI, {\n            method: 'GET',\n            url: '/v2/swap/assets',\n            errors: {\n                500: `Default Response`,\n            },\n        });\n    }\n}\n","import { useAppContext } from '../../hooks/appContext';\nimport { OpenAPI, SwapService } from '@tonkeeper/core/dist/swapsApi';\nexport const useSwapsConfig = () => {\n    const { config } = useAppContext();\n    OpenAPI.BASE = config.web_swaps_url;\n    return {\n        swapService: SwapService,\n        referralAddress: config.web_swaps_referral_address,\n        isSwapsEnabled: !!config.web_swaps_url\n    };\n};\n"],"names":["eqAddresses","address1","address2","Address","parse","equals","e","swapFromAsset$","atom","TON_ASSET","swapToAsset$","TON_USDT_ASSET","swapAmount$","BigNumber","useSwapFromAsset","fromAsset","_setFromAsset","useAtom","_","_setToAsset","useCallback","asset","address","value","useSwapToAsset","toAsset","useSwapFromAmount","useMaxSwapValue","data","swapGas","isError","useSwapGasConfig","balance","useAssetWeiBalance","useQuery","queryKey","QueryKey","swapMaxValue","id","toFixed","queryFn","async","dedustGas","dedust","tonToJetton","stonfiGas","stonfi","balanceWithoutFee","minus","max","lt","enabled","undefined","swapService","useSwapsConfig","swapGasConfig","selectedSwap$","useSelectedSwap","useSwapPriceImpact","selectedSwap","fromAssetRate","isLoading","fromAssetRateLoading","useRate","tonAssetAddressToString","toAssetRate","toAssetRateLoading","trade","prices","fromFiat","from","relativeAmount","multipliedBy","toFiat","to","isEqualTo","dividedBy","priceImpactStatus","priceImpact","isGreaterThan","useIsSwapFormNotCompleted","fromAmount","isZero","generateStonfiSwapLink","fromToken","toToken","targetEnv","referralAddress","url","URL","searchParams","append","addressToStonfiAddress","concat","toString","isTon","urlSafe","swapMobileNotificationOpen$","useSwapMobileNotification","isOpen","_setIsOpen","isSwapsEnabled","sdk","useAppSdk","tonendpoint","env","useAppContext","val","swapLink","stonfiReferralAddress","openPage","CancelError","Error","constructor","message","super","this","name","isCancelled","_isResolved","WeakMap","_isRejected","_isCancelled","_cancelHandlers","_promise","_resolve","_reject","_Symbol$toStringTag","Symbol","toStringTag","CancelablePromise","executor","_classPrivateFieldInitSpec","writable","_classPrivateFieldSet","Promise","resolve","reject","onCancel","cancelHandler","_classPrivateFieldGet","push","Object","defineProperty","get","call","reason","then","onFulfilled","onRejected","catch","finally","onFinally","cancel","length","error","console","warn","OpenAPI","BASE","VERSION","WITH_CREDENTIALS","CREDENTIALS","TOKEN","USERNAME","PASSWORD","HEADERS","ENCODE_PATH","ApiError","request","response","_defineProperty","status","statusText","body","isDefined","isString","isStringWithValue","isBlob","type","stream","arrayBuffer","test","isFormData","FormData","getQueryString","params","qs","process","key","Array","isArray","forEach","v","entries","_ref","k","encodeURIComponent","String","_ref2","join","options","resolver","getHeaders","config","token","username","password","additionalHeaders","all","headers","Accept","filter","_ref5","reduce","_ref6","credentials","str","btoa","err","Buffer","base64","mediaType","Headers","getUrl","encoder","encodeURI","path","replace","substring","group","_options$path","hasOwnProperty","query","formData","JSON","stringify","_ref3","_ref4","getFormData","_options$mediaType","includes","getRequestBody","controller","AbortController","method","signal","abort","fetch","sendRequest","responseBody","contentType","some","toLowerCase","startsWith","json","text","getResponseBody","responseHeader","getResponseHeader","content","result","ok","catchErrorCodes","errors","_result$status","_result$statusText","errorStatus","errorStatusText","errorBody","SwapService","calculateSwap","provider","referral","__request","encodeSwap","requestBody","swapAssets","web_swaps_url","web_swaps_referral_address"],"sourceRoot":""}