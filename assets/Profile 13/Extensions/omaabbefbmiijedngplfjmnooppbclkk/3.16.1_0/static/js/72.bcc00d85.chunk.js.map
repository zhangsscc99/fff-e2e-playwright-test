{"version":3,"file":"static/js/72.bcc00d85.chunk.js","mappings":"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","sources":["../../../packages/core/dist/entries/nft.js","../../../packages/uikit/dist/hooks/blockchain/nft/useAreNftActionsDisabled.js","../../../packages/uikit/dist/hooks/blockchain/useEstimateTonFee.js","../../../packages/uikit/dist/hooks/blockchain/nft/useEstimateNftLink.js","../../../packages/uikit/dist/hooks/blockchain/useExecuteTonContract.js","../../../packages/uikit/dist/hooks/blockchain/nft/useLinkNft.js","../../../packages/uikit/dist/hooks/blockchain/useTonRecipient.js","../../../packages/uikit/dist/hooks/useNotification.js","../../../packages/uikit/dist/hooks/useQueryChangeWait.js","../../../packages/uikit/dist/components/nft/LinkNft.js","../../../packages/uikit/dist/components/nft/RenewNft.js","../../../packages/uikit/dist/hooks/blockchain/nft/useEstimateNftRenew.js","../../../packages/uikit/dist/hooks/blockchain/nft/useRenewNft.js","../../../packages/uikit/dist/components/nft/NftAction.js","../../../packages/uikit/dist/components/nft/NftDetails.js","../../../packages/uikit/dist/components/nft/NftView.js","../../../packages/uikit/dist/components/nft/NftNotification.js","../../../packages/uikit/dist/components/nft/Nfts.js","../../../packages/uikit/dist/hooks/dateFormat.js"],"sourcesContent":["export function isNFTDNS(nft) {\n    return !!nft.dns;\n}\n","import { seeIfAddressEqual } from '@tonkeeper/core/dist/utils/common';\nimport { useWalletContext } from '../../appContext';\nexport function useAreNftActionsDisabled(nft) {\n    const wallet = useWalletContext();\n    return (nft.sale !== undefined || !seeIfAddressEqual(wallet.active.rawAddress, nft.owner?.address));\n}\n","import { useQuery } from '@tanstack/react-query';\nimport { AssetAmount } from '@tonkeeper/core/dist/entries/crypto/asset/asset-amount';\nimport { TON_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { EmulationApi } from '@tonkeeper/core/dist/tonApiV2';\nimport { useAppContext, useWalletContext } from '../appContext';\nexport function useEstimateTonFee({ caller, queryKey, options }, args) {\n    const { api } = useAppContext();\n    const walletState = useWalletContext();\n    return useQuery(queryKey, async () => {\n        const boc = await caller({ ...args, walletState, api });\n        const event = await new EmulationApi(api.tonApiV2).emulateMessageToAccountEvent({\n            ignoreSignatureCheck: true,\n            accountId: walletState.active.rawAddress,\n            decodeMessageRequest: { boc }\n        });\n        const fee = new AssetAmount({\n            asset: TON_ASSET,\n            weiAmount: event.extra * -1\n        });\n        return { fee, payload: { event } };\n    }, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options);\n}\n","import { estimateNftLink } from '@tonkeeper/core/dist/service/transfer/nftService';\nimport { useEstimateTonFee } from '../useEstimateTonFee';\nexport const useEstimateNftLink = (args) => {\n    return useEstimateTonFee({\n        caller: estimateNftLink,\n        queryKey: ['estimate-link-nft', args.nftAddress, args.linkToAddress]\n    }, args);\n};\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { notifyError } from '../../components/transfer/common';\nimport { getSigner } from '../../state/mnemonic';\nimport { useTransactionAnalytics } from '../amplitude';\nimport { useAppContext, useWalletContext } from '../appContext';\nimport { useAppSdk } from '../appSdk';\nimport { useTranslation } from '../translation';\nimport { TxConfirmationCustomError } from '../../libs/errors/TxConfirmationCustomError';\nimport { useCheckTouchId } from '../../state/password';\nexport function useExecuteTonContract({ executor, eventName2 }, args) {\n    const { t } = useTranslation();\n    const sdk = useAppSdk();\n    const { api } = useAppContext();\n    const walletState = useWalletContext();\n    const client = useQueryClient();\n    const track2 = useTransactionAnalytics();\n    const { mutateAsync: checkTouchId } = useCheckTouchId();\n    return useMutation(async () => {\n        if (!args.fee) {\n            return false;\n        }\n        const signer = await getSigner(sdk, walletState.publicKey, checkTouchId).catch(() => null);\n        if (signer?.type !== 'cell') {\n            throw new TxConfirmationCustomError(t('ledger_operation_not_supported'));\n        }\n        if (signer === null)\n            return false;\n        track2(eventName2);\n        try {\n            await executor({\n                api,\n                walletState,\n                signer,\n                ...args\n            });\n        }\n        catch (e) {\n            await notifyError(client, sdk, t, e);\n        }\n        await client.invalidateQueries([walletState.active.rawAddress]);\n        await client.invalidateQueries();\n        return true;\n    });\n}\n","import { sendNftLink } from '@tonkeeper/core/dist/service/transfer/nftService';\nimport { useExecuteTonContract } from '../useExecuteTonContract';\nexport const useLinkNft = (args) => useExecuteTonContract({ executor: sendNftLink, eventName2: 'link-dns' }, args);\n","import { BLOCKCHAIN_NAME } from '@tonkeeper/core/dist/entries/crypto';\nimport { formatAddress } from '@tonkeeper/core/dist/utils/common';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { useGetToAccount } from '../../components/transfer/RecipientView';\nimport { useWalletContext } from '../appContext';\nexport function useTonRecipient(address) {\n    const wallet = useWalletContext();\n    const isFirstRender = useRef(true);\n    const { isLoading, data: toAccount, mutate: mutateRecipient } = useGetToAccount();\n    useEffect(() => {\n        isFirstRender.current = false;\n        mutateRecipient({ address });\n    }, [address]);\n    const recipient = useMemo(() => ({\n        address: {\n            address: formatAddress(address, wallet.network, true),\n            blockchain: BLOCKCHAIN_NAME.TON\n        },\n        comment: '',\n        done: false,\n        toAccount: toAccount\n    }), [toAccount]);\n    return {\n        recipient,\n        isLoading: isFirstRender.current ? true : isLoading\n    };\n}\n","import { notifyError } from '../components/transfer/common';\nimport { useTranslation } from './translation';\nimport { useAppSdk } from './appSdk';\nimport { useQueryClient } from '@tanstack/react-query';\nexport function useNotification() {\n    const { t } = useTranslation();\n    const sdk = useAppSdk();\n    const client = useQueryClient();\n    return (e) => notifyError(client, sdk, t, e);\n}\n","import { useEffect, useRef, useState } from 'react';\nexport function useQueryChangeWait(query, shouldExit) {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isCompleted, setIsCompleted] = useState(false);\n    const [dispose, setDispose] = useState(false);\n    const prev = useRef(query.data);\n    const waitRecursive = async () => {\n        const result = await query.refetch();\n        if (dispose) {\n            setIsLoading(false);\n        }\n        if (shouldExit(result.data, prev.current)) {\n            setIsLoading(false);\n            setIsCompleted(true);\n            return;\n        }\n        prev.current = result.data;\n        setTimeout(waitRecursive, 1000);\n    };\n    useEffect(() => () => setDispose(true), []);\n    return {\n        isLoading,\n        isCompleted,\n        data: query.data,\n        refetch: (timeLimit = 10000) => {\n            prev.current = query.data;\n            setIsLoading(true);\n            setDispose(false);\n            setIsCompleted(false);\n            setTimeout(() => {\n                if (isLoading) {\n                    setDispose(true);\n                }\n            }, timeLimit);\n            waitRecursive();\n        }\n    };\n}\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Address } from '@ton/core';\nimport { AssetAmount } from '@tonkeeper/core/dist/entries/crypto/asset/asset-amount';\nimport { TON_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { getWalletsAddresses } from '@tonkeeper/core/dist/service/walletService';\nimport { unShiftedDecimals } from '@tonkeeper/core/dist/utils/balance';\nimport { areEqAddresses, formatAddress, toShortValue } from '@tonkeeper/core/dist/utils/common';\nimport { isTMEDomain } from '@tonkeeper/core/dist/utils/nft';\nimport BigNumber from 'bignumber.js';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { useWalletContext } from '../../hooks/appContext';\nimport { useToast } from '../../hooks/appSdk';\nimport { useAreNftActionsDisabled } from '../../hooks/blockchain/nft/useAreNftActionsDisabled';\nimport { useEstimateNftLink } from '../../hooks/blockchain/nft/useEstimateNftLink';\nimport { useLinkNft } from '../../hooks/blockchain/nft/useLinkNft';\nimport { useTonRecipient } from '../../hooks/blockchain/useTonRecipient';\nimport { useTranslation } from '../../hooks/translation';\nimport { useNotification } from '../../hooks/useNotification';\nimport { useQueryChangeWait } from '../../hooks/useQueryChangeWait';\nimport { useNftDNSLinkData } from '../../state/wallet';\nimport { ColumnText, Gap } from '../Layout';\nimport { ListItem, ListItemPayload } from '../List';\nimport { Notification, NotificationBlock } from '../Notification';\nimport { Body1, Body2 } from '../Text';\nimport { Label } from '../activity/NotificationCommon';\nimport { Button } from '../fields/Button';\nimport { Input } from '../fields/Input';\nimport { ConfirmView, ConfirmViewButtons, ConfirmViewButtonsSlot, ConfirmViewDetailsAmount, ConfirmViewDetailsFee, ConfirmViewDetailsSlot, ConfirmViewHeadingSlot, ConfirmViewTitleSlot } from '../transfer/ConfirmView';\nimport { ConfirmAndCancelMainButton } from '../transfer/common';\nexport const LinkNft = ({ nft }) => {\n    const toast = useToast();\n    const { t } = useTranslation();\n    const query = useNftDNSLinkData(nft);\n    const { data, isLoading } = query;\n    const linkedAddress = data?.wallet?.address || '';\n    const { refetch, isLoading: isWaitingForUpdate, isCompleted } = useQueryChangeWait(query, (current, prev) => !!prev?.wallet?.address !== !!current?.wallet?.address);\n    useEffect(() => {\n        if (isCompleted) {\n            toast(linkedAddress ? t('dns_address_linked') : t('dns_address_unlinked'));\n        }\n    }, [isCompleted, linkedAddress]);\n    if (!linkedAddress) {\n        return (_jsx(LinkNftUnlinked, { nft: nft, isLoading: isLoading || isWaitingForUpdate, refetch: refetch }));\n    }\n    return (_jsx(LinkNftLinked, { nft: nft, linkedAddress: linkedAddress, isLoading: isWaitingForUpdate, refetch: refetch }));\n};\nconst ReplaceButton = styled(Body2) `\n    cursor: pointer;\n    color: ${props => (!props.isDisabled ? props.theme.textAccent : props.theme.textSecondary)};\n    pointer-events: ${props => (props.isDisabled ? 'none' : 'unset')};\n`;\nconst dnsLinkAmount = new BigNumber(0.02);\nconst dnsLinkAssetAmount = AssetAmount.fromRelativeAmount({\n    asset: TON_ASSET,\n    amount: dnsLinkAmount\n});\nconst LinkNftUnlinked = ({ nft, isLoading, refetch }) => {\n    const notifyError = useNotification();\n    const { t } = useTranslation();\n    const [openedView, setOpenedView] = useState();\n    const walletState = useWalletContext();\n    const [linkToAddress, setLinkToAddress] = useState(walletState.active.rawAddress);\n    const onClose = (confirm) => {\n        if (openedView === 'wallet') {\n            return setOpenedView('confirm');\n        }\n        setOpenedView(undefined);\n        if (confirm) {\n            refetch();\n        }\n        else {\n            setLinkToAddress(walletState.active.rawAddress);\n        }\n    };\n    const { recipient, isLoading: isRecipientLoading } = useTonRecipient(nft.address);\n    const { refetch: refetchEstimateFee, ...estimation } = useEstimateNftLink({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsLinkAmount),\n        linkToAddress\n    });\n    const onSaveLinkToAddress = useCallback(async (address) => {\n        setLinkToAddress(address);\n        await refetchEstimateFee();\n        setOpenedView('confirm');\n    }, [refetchEstimateFee, nft.address]);\n    const mutation = useLinkNft({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsLinkAmount),\n        linkToAddress,\n        fee: estimation.data?.payload\n    });\n    const isSelectedCurrentAddress = areEqAddresses(linkToAddress, walletState.active.rawAddress);\n    const confirmChild = () => (_jsxs(ConfirmView, { onClose: onClose, recipient: recipient, assetAmount: dnsLinkAssetAmount, fitContent: true, estimation: estimation, ...mutation, children: [_jsx(ConfirmViewTitleSlot, {}), _jsx(ConfirmViewHeadingSlot, {}), _jsxs(ConfirmViewDetailsSlot, { children: [_jsx(ListItem, { hover: false, children: _jsxs(ListItemPayload, { children: [_jsx(Label, { children: isSelectedCurrentAddress\n                                        ? t('dns_current_address')\n                                        : t('wallet_address') }), _jsx(ColumnText, { right: true, text: toShortValue(formatAddress(linkToAddress, walletState.network)), secondary: _jsx(ReplaceButton, { isDisabled: mutation.isLoading, onClick: () => setOpenedView('wallet'), children: t('replace') }) })] }) }), _jsx(ConfirmViewDetailsAmount, {}), _jsx(ConfirmViewDetailsFee, {})] }), _jsx(ConfirmViewButtonsSlot, { children: _jsx(ConfirmViewButtons, { MainButton: ConfirmAndCancelMainButton }) })] }));\n    const chooseWalletChild = useCallback(() => (_jsx(LinkNFTWalletView, { onSave: onSaveLinkToAddress, isLoading: estimation.isFetching, domain: nft.dns })), [onSaveLinkToAddress, estimation.isFetching]);\n    const isDisabled = useAreNftActionsDisabled(nft);\n    const onOpen = () => {\n        if (estimation.error) {\n            notifyError(estimation.error);\n            return;\n        }\n        setOpenedView('confirm');\n    };\n    const isTME = isTMEDomain(nft.dns);\n    return (_jsxs(_Fragment, { children: [_jsx(Button, { type: \"button\", size: \"large\", secondary: true, fullWidth: true, disabled: isDisabled, loading: estimation.isFetching || isRecipientLoading || isLoading, onClick: onOpen, children: isTME ? t('nft_link_username_button') : t('nft_link_domain_button') }), _jsx(Notification, { title: openedView === 'wallet'\n                    ? t('wallet_address')\n                    : t('send_screen_steps_comfirm_title'), isOpen: !!openedView, hideButton: true, handleClose: () => onClose(), backShadow: true, children: openedView === 'wallet' ? chooseWalletChild : confirmChild })] }));\n};\nconst WalletLabelStyled = styled(Body1) `\n    color: ${props => props.theme.textSecondary};\n    margin-bottom: 1.5rem;\n`;\nconst ChangeWalletContainerStyled = styled(NotificationBlock) `\n    align-items: flex-start;\n`;\nconst LinkNFTWalletView = ({ onSave, isLoading, domain }) => {\n    const { t } = useTranslation();\n    const [inputValue, setInputValue] = useState('');\n    const [wasSubmitted, setWasSubmitted] = useState(false);\n    const isInputValid = useMemo(() => {\n        if (!wasSubmitted) {\n            return true;\n        }\n        try {\n            Address.parse(inputValue);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }, [wasSubmitted, inputValue]);\n    const onSubmit = e => {\n        e.stopPropagation();\n        e.preventDefault();\n        setWasSubmitted(true);\n        try {\n            onSave(Address.parse(inputValue).toRawString());\n        }\n        catch (err) {\n            console.error(err);\n        }\n    };\n    return (_jsxs(ChangeWalletContainerStyled, { onSubmit: onSubmit, children: [_jsx(WalletLabelStyled, { children: t('add_dns_address').replace('%1%', domain) }), _jsx(Input, { disabled: isLoading, isValid: isInputValid, value: inputValue, onChange: setInputValue, label: t('wallet_address'), clearButton: true }), _jsx(Gap, {}), _jsx(Button, { fullWidth: true, size: \"large\", primary: true, disabled: !inputValue, loading: isLoading, children: \"Save\" })] }));\n};\nconst WarnTextStyled = styled(Body2) `\n    text-align: center;\n    color: ${props => props.theme.accentOrange};\n`;\nconst linkToAddress = '';\nconst LinkNftLinked = ({ nft, linkedAddress, isLoading, refetch }) => {\n    const notifyError = useNotification();\n    const { t } = useTranslation();\n    const walletState = useWalletContext();\n    const [isOpen, setIsOpen] = useState(false);\n    const onClose = (confirm) => {\n        setIsOpen(false);\n        if (confirm) {\n            refetch();\n        }\n    };\n    const { recipient, isLoading: isRecipientLoading } = useTonRecipient(nft.address);\n    const estimation = useEstimateNftLink({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsLinkAmount),\n        linkToAddress\n    });\n    const mutation = useLinkNft({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsLinkAmount),\n        linkToAddress,\n        fee: estimation.data?.payload\n    });\n    const child = () => (_jsxs(ConfirmView, { onClose: onClose, recipient: recipient, assetAmount: dnsLinkAssetAmount, fitContent: true, estimation: estimation, ...mutation, children: [_jsx(ConfirmViewTitleSlot, {}), _jsx(ConfirmViewHeadingSlot, {}), _jsxs(ConfirmViewDetailsSlot, { children: [_jsx(ConfirmViewDetailsAmount, {}), _jsx(ConfirmViewDetailsFee, {})] }), _jsx(ConfirmViewButtonsSlot, { children: _jsx(ConfirmViewButtons, { MainButton: ConfirmAndCancelMainButton }) })] }));\n    const isDisabled = useAreNftActionsDisabled(nft);\n    const isTME = isTMEDomain(nft.dns);\n    const onOpen = () => {\n        if (estimation.error) {\n            notifyError(estimation.error);\n            return;\n        }\n        setIsOpen(true);\n    };\n    const isLinkedWithAnotherWallet = Object.values(getWalletsAddresses(walletState.publicKey, walletState.network)).every(address => !areEqAddresses(address.rawAddress, linkedAddress));\n    return (_jsxs(_Fragment, { children: [_jsx(Button, { type: \"button\", size: \"large\", secondary: true, fullWidth: true, disabled: isDisabled, loading: estimation.isFetching || isRecipientLoading || isLoading, onClick: onOpen, children: t('nft_unlink_domain_button').replace('{{address}}', toShortValue(formatAddress(linkedAddress, walletState.network))) }), isLinkedWithAnotherWallet && !isLoading && (_jsx(WarnTextStyled, { children: isTME\n                    ? t('tme_linked_with_another_address_warn')\n                    : t('dns_linked_with_another_address_warn') })), _jsx(Notification, { title: t('confirm_unlink'), isOpen: isOpen, hideButton: true, handleClose: () => onClose(), backShadow: true, children: child })] }));\n};\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { AssetAmount } from '@tonkeeper/core/dist/entries/crypto/asset/asset-amount';\nimport { TON_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { intlLocale } from '@tonkeeper/core/dist/entries/language';\nimport { unShiftedDecimals } from '@tonkeeper/core/dist/utils/balance';\nimport BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useToast } from '../../hooks/appSdk';\nimport { useAreNftActionsDisabled } from '../../hooks/blockchain/nft/useAreNftActionsDisabled';\nimport { useEstimateNftRenew } from '../../hooks/blockchain/nft/useEstimateNftRenew';\nimport { useRenewNft } from '../../hooks/blockchain/nft/useRenewNft';\nimport { useTonRecipient } from '../../hooks/blockchain/useTonRecipient';\nimport { toDaysLeft, useDateFormat } from '../../hooks/dateFormat';\nimport { useTranslation } from '../../hooks/translation';\nimport { useNotification } from '../../hooks/useNotification';\nimport { useQueryChangeWait } from '../../hooks/useQueryChangeWait';\nimport { useNftDNSExpirationDate } from '../../state/wallet';\nimport { Notification } from '../Notification';\nimport { Body2 } from '../Text';\nimport { Button } from '../fields/Button';\nimport { ConfirmView, ConfirmViewButtons, ConfirmViewButtonsSlot } from '../transfer/ConfirmView';\nimport { ConfirmAndCancelMainButton } from '../transfer/common';\nconst RenewDNSBlock = styled.div `\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\nconst RenewDNSButton = styled(Button) `\n    margin-bottom: 0.75rem;\n`;\nconst RenewDNSValidUntil = styled(Body2) `\n    color: ${props => (props.danger ? props.theme.accentRed : props.theme.textSecondary)};\n`;\nconst dnsRenewAmount = new BigNumber(0.02);\nconst dnsRenewAssetAmount = AssetAmount.fromRelativeAmount({\n    asset: TON_ASSET,\n    amount: new BigNumber(0.02)\n});\nconst YEAR_MS = 1000 * 60 * 60 * 24 * 366;\nconst intlOptions = { year: 'numeric', hour: undefined, minute: undefined };\nexport const RenewNft = ({ nft }) => {\n    const toast = useToast();\n    const isDisabled = useAreNftActionsDisabled(nft);\n    const notifyError = useNotification();\n    const { t, i18n: { language } } = useTranslation();\n    const rtf = new Intl.RelativeTimeFormat(intlLocale(language), { style: 'long' });\n    const query = useNftDNSExpirationDate(nft);\n    const { data: expirationDate, isLoading: isExpirationInfoLoading } = query;\n    const { refetch: refetchExpirationInfo, isLoading: isWaitingForUpdate, isCompleted } = useQueryChangeWait(query, (current, prev) => {\n        return !!current?.getTime() && current.getTime() !== prev?.getTime();\n    });\n    useEffect(() => {\n        if (isCompleted) {\n            toast(t('renew_nft_renewed'));\n        }\n    }, [isCompleted]);\n    const renewUntilFormatted = useDateFormat(Date.now() + YEAR_MS, intlOptions);\n    const [isOpen, setIsOpen] = useState(false);\n    const onClose = (confirmed) => {\n        setIsOpen(false);\n        if (confirmed) {\n            refetchExpirationInfo();\n        }\n    };\n    const { recipient, isLoading: isRecipientLoading } = useTonRecipient(nft.address);\n    const estimation = useEstimateNftRenew({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsRenewAmount)\n    });\n    const mutation = useRenewNft({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsRenewAmount),\n        fee: estimation.data?.payload\n    });\n    const onOpen = () => {\n        if (estimation.error) {\n            notifyError(estimation.error);\n            return;\n        }\n        setIsOpen(true);\n    };\n    if (!isExpirationInfoLoading && !expirationDate) {\n        return null;\n    }\n    const child = () => (_jsx(ConfirmView, { onClose: onClose, recipient: recipient, assetAmount: dnsRenewAssetAmount, fitContent: true, estimation: estimation, ...mutation, children: _jsx(ConfirmViewButtonsSlot, { children: _jsx(ConfirmViewButtons, { MainButton: ConfirmAndCancelMainButton }) }) }));\n    const daysLeft = toDaysLeft(expirationDate);\n    return (_jsxs(_Fragment, { children: [_jsxs(RenewDNSBlock, { children: [_jsx(RenewDNSButton, { type: \"button\", disabled: isDisabled || isWaitingForUpdate, loading: isExpirationInfoLoading || estimation.isFetching || isRecipientLoading, onClick: onOpen, size: \"large\", secondary: true, fullWidth: true, children: isWaitingForUpdate\n                            ? t('renew_nft_in_progress')\n                            : t('dns_renew_until_btn').replace('%{untilDate}', renewUntilFormatted) }), daysLeft !== '' && (_jsx(RenewDNSValidUntil, { danger: Number(daysLeft) <= 30, children: t('renew_nft_expiration_date').replace('%1%', rtf.format(Number(daysLeft), 'days')) }))] }), _jsx(Notification, { isOpen: isOpen, hideButton: true, handleClose: () => onClose, backShadow: true, children: child })] }));\n};\n","import { estimateNftRenew } from '@tonkeeper/core/dist/service/transfer/nftService';\nimport { useEstimateTonFee } from '../useEstimateTonFee';\nexport const useEstimateNftRenew = (args) => {\n    return useEstimateTonFee({ caller: estimateNftRenew, queryKey: ['estimate-nft-renew', args.nftAddress] }, args);\n};\n","import { sendNftRenew } from '@tonkeeper/core/dist/service/transfer/nftService';\nimport { useExecuteTonContract } from '../useExecuteTonContract';\nexport const useRenewNft = (args) => useExecuteTonContract({ executor: sendNftRenew, eventName2: 'renew-dns' }, args);\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Address } from '@ton/core';\nimport { isNFTDNS } from '@tonkeeper/core/dist/entries/nft';\nimport styled from 'styled-components';\nimport { useWalletContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { useTranslation } from '../../hooks/translation';\nimport { Body2 } from '../Text';\nimport { Button } from '../fields/Button';\nimport { LinkNft } from './LinkNft';\nimport { RenewNft } from './RenewNft';\nconst getMarketplaceUrl = (nftItem) => {\n    const { marketplace } = nftItem.metadata;\n    const address = Address.parse(nftItem.address).toString();\n    switch (marketplace) {\n        case 'getgems.io':\n            return `https://getgems.io/nft/${address}`;\n        // TODO: add more\n        default:\n            return `https://getgems.io/nft/${address}`;\n    }\n};\nconst ViewOnMarketButton = ({ url }) => {\n    const { t } = useTranslation();\n    const sdk = useAppSdk();\n    return (_jsx(Button, { size: \"large\", secondary: true, fullWidth: true, onClick: e => {\n            e.preventDefault();\n            e.stopPropagation();\n            sdk.openPage(url);\n        }, children: t('nft_open_in_marketplace') }));\n};\nconst ActionTransfer = ({ nftItem }) => {\n    const sdk = useAppSdk();\n    const { t } = useTranslation();\n    const wallet = useWalletContext();\n    return (_jsxs(_Fragment, { children: [_jsx(Button, { primary: true, size: \"large\", fullWidth: true, disabled: nftItem.sale !== undefined ||\n                    nftItem.owner?.address !== wallet.active.rawAddress, onClick: e => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    sdk.uiEvents.emit('transferNft', { method: 'transferNft', params: nftItem });\n                }, children: t('nft_transfer_nft') }), nftItem.sale && _jsx(DNSSaleText, { children: t('nft_on_sale_text') })] }));\n};\nconst SaleText = styled(Body2) `\n    width: 100%;\n    color: ${props => props.theme.textSecondary};\n`;\nconst DNSSaleText = styled(SaleText) `\n    width: 100%;\n    padding: 0 1rem;\n    text-align: left;\n`;\nexport const NftAction = ({ kind, nftItem }) => {\n    switch (kind) {\n        case 'token': {\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: getMarketplaceUrl(nftItem) })] }));\n        }\n        case 'ton.dns': {\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: `https://dns.ton.org/#${nftItem.dns?.slice(0, -4)}` }), isNFTDNS(nftItem) && (_jsxs(_Fragment, { children: [_jsx(LinkNft, { nft: nftItem }), _jsx(RenewNft, { nft: nftItem })] }))] }));\n        }\n        case 'telegram.number': {\n            const numbers = nftItem.metadata.name.replace(/\\s/g, '').slice(1);\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: `https://fragment.com/number/${numbers}` })] }));\n        }\n        case 'telegram.name': {\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: `https://fragment.com/username/${nftItem.dns?.slice(0, -5)}` }), isNFTDNS(nftItem) && _jsx(LinkNft, { nft: nftItem })] }));\n        }\n    }\n};\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Address } from '@ton/core';\nimport { formatAddress, toShortValue } from '@tonkeeper/core/dist/utils/common';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useAppContext, useWalletContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { useDateFormat } from '../../hooks/dateFormat';\nimport { useTranslation } from '../../hooks/translation';\nimport { useNftDNSExpirationDate, useNftItemData } from '../../state/wallet';\nimport { SpinnerIcon } from '../Icon';\nimport { ListBlock, ListItem, ListItemPayload } from '../List';\nimport { Body1, H3, Label1 } from '../Text';\nconst Block = styled.div `\n    width: 100%;\n`;\nconst Row = styled.div `\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 0.625rem;\n`;\nconst Link = styled(Label1) `\n    cursor: pointer;\n    color: ${props => props.theme.textAccent};\n`;\nconst RightText = styled(Body1) `\n    color: ${props => props.theme.textSecondary};\n`;\nexport const NftDetails = React.memo(({ nftItem }) => {\n    const wallet = useWalletContext();\n    const { t } = useTranslation();\n    const { data } = useNftItemData(nftItem.address);\n    const { data: expirationDate, isLoading: isExpirationDateLoading } = useNftDNSExpirationDate(nftItem);\n    const expirationDateFormatted = useDateFormat(expirationDate, {\n        year: 'numeric',\n        hour: undefined,\n        minute: undefined\n    });\n    const item = data ?? nftItem;\n    const sdk = useAppSdk();\n    const { config } = useAppContext();\n    const owner = item.owner?.address;\n    const address = Address.parse(item.address).toString();\n    const url = config.NFTOnExplorerUrl ?? 'https://tonviewer.com/nft/%s';\n    const nftAddress = formatAddress(address, wallet.network, true);\n    return (_jsxs(Block, { children: [_jsxs(Row, { children: [_jsx(H3, { children: t('nft_details') }), _jsx(Link, { onClick: () => sdk.openPage(url.replace('%s', address)), children: t('nft_view_in_explorer') })] }), _jsxs(ListBlock, { margin: false, children: [owner && (_jsx(ListItem, { onClick: () => sdk.copyToClipboard(formatAddress(owner, wallet.network)), children: _jsxs(ListItemPayload, { children: [_jsx(RightText, { children: t('nft_owner_address') }), _jsx(Label1, { children: toShortValue(formatAddress(owner, wallet.network)) })] }) })), !!(expirationDate || isExpirationDateLoading) && (_jsx(ListItem, { hover: false, children: _jsxs(ListItemPayload, { children: [_jsx(RightText, { children: t('dns_expiration_date') }), expirationDate ? (_jsx(Label1, { children: expirationDateFormatted })) : (_jsx(SpinnerIcon, {}))] }) })), _jsx(ListItem, { onClick: () => sdk.copyToClipboard(nftAddress), children: _jsxs(ListItemPayload, { children: [_jsx(RightText, { children: t('nft_contract_address') }), _jsx(Label1, { children: toShortValue(nftAddress) })] }) })] })] }));\n});\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useTranslation } from '../../hooks/translation';\nimport { useActiveWalletConfig, useNftCollectionData } from '../../state/wallet';\nimport { BlockIcon, ChevronDownIcon, EllipsisIcon, EyeDisableIcon, GlobeIcon, InfoCircleIcon, VerificationIcon } from '../Icon';\nimport { NotificationBlock, NotificationTitleBlock } from '../Notification';\nimport { Body2, H2, H3, Label1, Label4 } from '../Text';\nimport { RoundedButton } from '../fields/RoundedButton';\nimport { Body, CroppedBodyText } from '../jettons/CroppedText';\nimport { NftAction } from './NftAction';\nimport { NftDetails } from './NftDetails';\nimport { Image, NftBlock } from './Nfts';\nimport { TrustType } from '@tonkeeper/core/dist/tonApiV2';\nimport { Button } from '../fields/Button';\nimport { useHideNft, useMarkNftAsSpam, useMarkNftAsTrusted } from '../../state/nft';\nimport { UnverifiedNftNotification } from './UnverifiedNftNotification';\nimport { useDisclosure } from '../../hooks/useDisclosure';\nimport { DropDown } from '../DropDown';\nimport { ListBlock, ListItemElement, ListItemPayload } from '../List';\nimport { useAppContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nconst Text = styled.div `\n    display: flex;\n    flex-direction: column;\n    padding: 0.875rem 1rem;\n`;\nconst Delimiter = styled.div `\n    border-top: 1px solid ${props => props.theme.separatorCommon};\n`;\nconst CollectionTitle = styled(Label1) `\n    margin-bottom: 0.5rem;\n`;\nconst Icon = styled.span `\n    position: relative;\n    top: 3px;\n    margin-left: 4px;\n`;\nexport const TonDnsRootCollectionAddress = '0:b774d95eb20543f186c06b371ab88ad704f7e256130caf96189368a7d0cb6ccf';\nexport const TelegramUsernamesCollectionAddress = '0:80d78a35f955a14b679faa887ff4cd5bfc0f43b4a4eea2a7e6927f3701b273c2';\nexport const TelegramNumbersCollectionAddress = '0:0e41dc1dc3c9067ed24248580e12b3359818d83dee0304fabcf80845eafafdb2';\nexport const GetGemsDnsCollectionAddress = '0:e1955aba7249f23e4fd2086654a176516d98b134e0df701302677c037c358b17';\nexport const KnownNFTDnsCollections = [\n    TonDnsRootCollectionAddress,\n    TelegramNumbersCollectionAddress,\n    TelegramUsernamesCollectionAddress,\n    GetGemsDnsCollectionAddress\n];\nconst Title = styled(H2) `\n    word-break: break-word;\n\n    user-select: none;\n`;\nconst SaleBlock = styled(Label4) `\n    color: ${props => props.theme.textSecondary};\n    border: 1px solid ${props => props.theme.buttonTertiaryBackground};\n    border-radius: 6px;\n    padding: 3.5px 6px 4.5px;\n    text-transform: uppercase;\n\n    position: relative;\n    top: -3px;\n\n    white-space: nowrap;\n`;\nconst UnverifiedLabel = styled(Body2) `\n    color: ${props => (props.isTrusted ? props.theme.textSecondary : props.theme.accentOrange)};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n`;\nconst NftNameContainer = styled.div `\n    text-align: center;\n`;\nconst ButtonsBlock = styled.div `\n    display: flex;\n    gap: 8px;\n    width: 100%;\n\n    > * {\n        flex: 1;\n    }\n`;\nconst DropDownWrapper = styled.div `\n    .drop-down-container {\n        z-index: 100;\n        top: calc(100% + 12px);\n        right: 0;\n    }\n`;\nconst ListBlockStyled = styled(ListBlock) `\n    margin: 0;\n\n    svg {\n        color: ${p => p.theme.accentBlue};\n    }\n`;\nexport const NftPreview = ({ onClose, nftItem }) => {\n    const { mutateAsync: markNftAsSpam, isLoading: markNftAsSpamLoading } = useMarkNftAsSpam();\n    const { mutate: markNftAsTrusted, isLoading: markNftAsTrustedLoading } = useMarkNftAsTrusted();\n    const { mutateAsync: hideNft } = useHideNft();\n    const { data } = useActiveWalletConfig();\n    const isSuspicious = nftItem.trust !== TrustType.Whitelist;\n    const isTrusted = !!data?.trustedNfts.includes(nftItem.collection?.address || nftItem.address);\n    const ref = useRef(null);\n    const { t } = useTranslation();\n    const { data: collection } = useNftCollectionData(nftItem);\n    const { description } = nftItem.metadata;\n    const name = nftItem.dns ?? nftItem.metadata.name;\n    const itemKind = useMemo(() => {\n        switch (nftItem.collection?.address) {\n            case TonDnsRootCollectionAddress:\n                return 'ton.dns';\n            case TelegramUsernamesCollectionAddress:\n                return 'telegram.name';\n            case TelegramNumbersCollectionAddress:\n                return 'telegram.number';\n            default:\n                return 'token';\n        }\n    }, [nftItem]);\n    const collectionName = nftItem?.collection?.name;\n    const image = nftItem.previews?.find(item => item.resolution === '1500x1500');\n    const { isOpen: isSpamModalOpen, onClose: onCloseSpamModal, onOpen: onOpenSpamModal } = useDisclosure();\n    const handleCloseSpamModal = (action) => {\n        if (action === 'mark_spam') {\n            markNftAsSpam(nftItem).then(onClose);\n        }\n        else if (action === 'mark_trusted') {\n            markNftAsTrusted(nftItem);\n        }\n        onCloseSpamModal();\n    };\n    const { config } = useAppContext();\n    const sdk = useAppSdk();\n    const explorerUrl = config.NFTOnExplorerUrl ?? 'https://tonviewer.com/nft/%s';\n    return (_jsxs(NotificationBlock, { children: [onClose && (_jsxs(NotificationTitleBlock, { children: [_jsx(RoundedButton, { onClick: onClose, children: _jsx(ChevronDownIcon, {}) }), _jsxs(NftNameContainer, { children: [_jsx(H3, { children: nftItem.dns ?? nftItem.metadata.name }), isSuspicious && (_jsxs(UnverifiedLabel, { isTrusted: isTrusted, onClick: onOpenSpamModal, children: [t('suspicious_label_full'), \"\\u00A0\", _jsx(InfoCircleIcon, { color: isTrusted ? 'textSecondary' : 'accentOrange' })] }))] }), _jsx(UnverifiedNftNotification, { isOpen: isSpamModalOpen, onClose: handleCloseSpamModal, isTrusted: isTrusted }), _jsx(DropDownWrapper, { children: _jsx(DropDown, { containerClassName: \"drop-down-container\", payload: closeDropDown => (_jsxs(ListBlockStyled, { children: [_jsx(ListItemElement, { onClick: () => {\n                                            closeDropDown();\n                                            hideNft(nftItem).then(onClose);\n                                        }, children: _jsxs(ListItemPayload, { children: [_jsx(Label1, { children: t('nft_actions_hide_nft') }), _jsx(EyeDisableIcon, {})] }) }), _jsx(ListItemElement, { onClick: () => {\n                                            closeDropDown();\n                                            markNftAsSpam(nftItem).then(onClose);\n                                        }, children: _jsxs(ListItemPayload, { children: [_jsx(Label1, { children: t('nft_actions_hide_and_report') }), _jsx(BlockIcon, {})] }) }), _jsx(ListItemElement, { onClick: () => sdk.openPage(explorerUrl.replace('%s', nftItem.address)), children: _jsxs(ListItemPayload, { children: [_jsx(Label1, { children: t('nft_actions_view_on_explorer') }), _jsx(GlobeIcon, {})] }) })] })), children: _jsx(RoundedButton, { children: _jsx(EllipsisIcon, {}) }) }) })] })), isSuspicious && !isTrusted && (_jsxs(ButtonsBlock, { children: [_jsx(Button, { warn: true, type: \"button\", onClick: () => markNftAsSpam(nftItem).then(onClose), loading: markNftAsSpamLoading, children: t('suspicious_buttons_report') }), _jsx(Button, { type: \"button\", onClick: () => markNftAsTrusted(nftItem), loading: markNftAsTrustedLoading, children: t('suspicious_buttons_not_spam') })] })), _jsxs(NftBlock, { children: [image && _jsx(Image, { ref: ref, url: image.url }), _jsxs(Text, { children: [_jsxs(Title, { children: [name, nftItem.sale && (_jsxs(_Fragment, { children: ['  ', _jsx(SaleBlock, { children: t('nft_on_sale') })] }))] }), collectionName && (_jsxs(Body, { open: true, margin: \"small\", children: [collectionName, nftItem.approvedBy && nftItem.approvedBy.length > 0 && (_jsx(Icon, { children: _jsx(VerificationIcon, {}) }))] })), description && (_jsx(CroppedBodyText, { text: description, margin: \"last\", contentColor: true }))] }), collection && collection.metadata?.description && (_jsxs(_Fragment, { children: [_jsx(Delimiter, {}), _jsxs(Text, { children: [_jsx(CollectionTitle, { children: t('nft_about_collection') }), _jsx(CroppedBodyText, { text: collection.metadata.description, margin: \"last\", contentColor: true })] })] }))] }), _jsx(NftAction, { nftItem: nftItem, kind: itemKind }), _jsx(NftDetails, { nftItem: nftItem, kind: itemKind })] }));\n};\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { Notification } from '../Notification';\nimport { NftPreview } from './NftView';\nconst NftNotification = () => {\n    const sdk = useAppSdk();\n    const [nftItem, setNft] = useState(undefined);\n    const handleClose = useCallback(() => {\n        setNft(undefined);\n    }, [setNft]);\n    useEffect(() => {\n        const handler = (options) => {\n            setNft(options.params);\n        };\n        sdk.uiEvents.on('nft', handler);\n        return () => {\n            sdk.uiEvents.off('nft', handler);\n        };\n    }, [sdk, setNft]);\n    const Content = useCallback(() => {\n        if (!nftItem)\n            return undefined;\n        return _jsx(NftPreview, { onClose: handleClose, nftItem: nftItem });\n    }, [nftItem, handleClose]);\n    return (_jsx(Notification, { isOpen: nftItem !== undefined, hideButton: true, handleClose: handleClose, backShadow: true, children: Content }));\n};\nexport default NftNotification;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React, { useContext, useLayoutEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { AppSelectionContext, useAppContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { toDaysLeft } from '../../hooks/dateFormat';\nimport { useNftDNSExpirationDate } from '../../state/wallet';\nimport { FireBadgeIcon, SaleIcon } from '../Icon';\nimport { NftCollectionBody3, NftHeaderLabel2 } from './NftHeader';\nconst Grid = styled.div `\n    display: grid;\n    margin: 0 0 2rem 0;\n    gap: 0.5rem;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n`;\nexport const NftBlock = styled.div `\n    position: relative;\n    user-select: none;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n\n    background-color: ${props => props.theme.backgroundContent};\n    transition: background-color 0.1s ease;\n\n    border-radius: ${props => props.theme.cornerSmall};\n\n    overflow: hidden;\n\n    ${props => {\n    if (props.ios) {\n        if (props.isHover) {\n            return css `\n                    background-color: ${props.theme.backgroundContentTint};\n                `;\n        }\n    }\n    else {\n        if (!props.hover) {\n            return undefined;\n        }\n        else {\n            return css `\n                    cursor: pointer;\n\n                    &:hover {\n                        background-color: ${props.theme.backgroundContentTint};\n                    }\n                `;\n        }\n    }\n}}\n`;\nconst ImageContainer = styled.div `\n    width: 100%;\n    position: relative;\n`;\nexport const Image = styled.div `\n    width: 100%;\n    padding-bottom: 100%;\n\n    ${props => props.url &&\n    css `\n            background-image: url('${props.url}');\n        `}\n    background-size: cover;\n`;\nconst Text = styled.div `\n    display: flex;\n    flex-direction: column;\n    padding: 0.5rem 0.75rem 0.5rem;\n    white-space: nowrap;\n`;\nconst SaleBlock = styled.div `\n    position: absolute;\n    top: 10px;\n    right: 8px;\n`;\nconst ExpiringBlock = styled.div `\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    height: 32px;\n    width: 32px;\n`;\nexport const NftItemView = React.memo(({ nft, resolution, onOpen }) => {\n    const isSale = nft.sale !== undefined;\n    const image = nft.previews?.find(item => item.resolution === resolution);\n    const { ios } = useAppContext();\n    const [isHover, setHover] = useState(false);\n    const ref = useRef(null);\n    const selection = useContext(AppSelectionContext);\n    const { data: expirationDate } = useNftDNSExpirationDate(nft);\n    useLayoutEffect(() => {\n        if (ref.current && selection && ref.current.contains(selection)) {\n            setHover(true);\n        }\n        else {\n            setHover(false);\n        }\n    }, [ref.current, selection, setHover]);\n    const isExpiring = expirationDate && Number(toDaysLeft(expirationDate)) <= 30;\n    return (_jsxs(NftBlock, { hover: true, isHover: isHover, ios: ios, ref: ref, onClick: () => onOpen(nft), children: [_jsxs(ImageContainer, { children: [_jsx(Image, { url: image?.url }), isSale && (_jsx(SaleBlock, { children: _jsx(SaleIcon, {}) })), isExpiring && (_jsx(ExpiringBlock, { children: _jsx(FireBadgeIcon, {}) }))] }), _jsxs(Text, { children: [_jsx(NftHeaderLabel2, { nft: nft }), _jsx(NftCollectionBody3, { nft: nft })] })] }));\n});\nexport const NftsList = ({ nfts, className }) => {\n    const sdk = useAppSdk();\n    return (_jsx(Grid, { className: className, children: (nfts ?? []).map(item => {\n            if (item.metadata?.render_type === 'hidden') {\n                return _jsx(_Fragment, {});\n            }\n            return (_jsx(NftItemView, { nft: item, resolution: \"500x500\", onOpen: () => sdk.openNft(item) }, item.address));\n        }) }));\n};\n","import { intlLocale } from '@tonkeeper/core/dist/entries/language';\nimport { useMemo } from 'react';\nimport { useTranslation } from './translation';\nexport function useDateFormat(date, options) {\n    const { i18n } = useTranslation();\n    return useMemo(() => {\n        if (!date) {\n            return '';\n        }\n        return new Intl.DateTimeFormat(intlLocale(i18n.language), {\n            month: 'short',\n            day: 'numeric',\n            year: new Date().getFullYear() - 1 === new Date(date).getFullYear()\n                ? 'numeric'\n                : undefined,\n            hour: 'numeric',\n            minute: 'numeric',\n            ...options\n        }).format(date);\n    }, [date, i18n.language, options]);\n}\nexport function toDaysLeft(date) {\n    if (!date) {\n        return '';\n    }\n    const days = Math.floor((new Date(date).getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n    if (days < 0) {\n        return '0';\n    }\n    return days.toString();\n}\n"],"names":["isNFTDNS","nft","dns","useAreNftActionsDisabled","_nft$owner","wallet","useWalletContext","undefined","sale","seeIfAddressEqual","active","rawAddress","owner","address","useEstimateTonFee","_ref","args","caller","queryKey","options","api","useAppContext","walletState","useQuery","async","boc","event","EmulationApi","tonApiV2","emulateMessageToAccountEvent","ignoreSignatureCheck","accountId","decodeMessageRequest","fee","AssetAmount","asset","TON_ASSET","weiAmount","extra","payload","useEstimateNftLink","estimateNftLink","nftAddress","linkToAddress","useExecuteTonContract","executor","eventName2","t","useTranslation","sdk","useAppSdk","client","useQueryClient","track2","useTransactionAnalytics","mutateAsync","checkTouchId","useCheckTouchId","useMutation","signer","getSigner","publicKey","catch","type","TxConfirmationCustomError","e","notifyError","invalidateQueries","useLinkNft","sendNftLink","useTonRecipient","isFirstRender","useRef","isLoading","data","toAccount","mutate","mutateRecipient","useGetToAccount","useEffect","current","recipient","useMemo","formatAddress","network","blockchain","BLOCKCHAIN_NAME","TON","comment","done","useNotification","useQueryChangeWait","query","shouldExit","setIsLoading","useState","isCompleted","setIsCompleted","dispose","setDispose","prev","waitRecursive","result","refetch","setTimeout","timeLimit","arguments","length","LinkNft","_data$wallet","toast","useToast","useNftDNSLinkData","linkedAddress","isWaitingForUpdate","_prev$wallet","_current$wallet","_jsx","LinkNftLinked","LinkNftUnlinked","ReplaceButton","styled","Body2","_templateObject","_taggedTemplateLiteral","props","isDisabled","theme","textSecondary","textAccent","dnsLinkAmount","BigNumber","dnsLinkAssetAmount","fromRelativeAmount","amount","_ref2","_estimation$data","openedView","setOpenedView","setLinkToAddress","onClose","confirm","isRecipientLoading","refetchEstimateFee","estimation","unShiftedDecimals","onSaveLinkToAddress","useCallback","mutation","isSelectedCurrentAddress","areEqAddresses","chooseWalletChild","LinkNFTWalletView","onSave","isFetching","domain","isTME","isTMEDomain","_jsxs","_Fragment","children","Button","size","secondary","fullWidth","disabled","loading","onClick","onOpen","error","Notification","title","isOpen","hideButton","handleClose","backShadow","confirmChild","ConfirmView","assetAmount","fitContent","ConfirmViewTitleSlot","ConfirmViewHeadingSlot","ConfirmViewDetailsSlot","ListItem","hover","ListItemPayload","Label","ColumnText","right","text","toShortValue","ConfirmViewDetailsAmount","ConfirmViewDetailsFee","ConfirmViewButtonsSlot","ConfirmViewButtons","MainButton","ConfirmAndCancelMainButton","WalletLabelStyled","Body1","_templateObject2","ChangeWalletContainerStyled","NotificationBlock","_templateObject3","_ref3","inputValue","setInputValue","wasSubmitted","setWasSubmitted","isInputValid","Address","parse","onSubmit","stopPropagation","preventDefault","toRawString","err","console","replace","Input","isValid","value","onChange","label","clearButton","Gap","primary","WarnTextStyled","_templateObject4","accentOrange","_ref4","_estimation$data2","setIsOpen","isLinkedWithAnotherWallet","Object","values","getWalletsAddresses","every","child","RenewDNSBlock","div","RenewDNSButton","RenewDNSValidUntil","danger","accentRed","dnsRenewAmount","dnsRenewAssetAmount","intlOptions","year","hour","minute","RenewNft","i18n","language","rtf","Intl","RelativeTimeFormat","intlLocale","style","useNftDNSExpirationDate","expirationDate","isExpirationInfoLoading","refetchExpirationInfo","getTime","renewUntilFormatted","useDateFormat","Date","now","confirmed","estimateNftRenew","sendNftRenew","useRenewNft","daysLeft","toDaysLeft","Number","format","getMarketplaceUrl","nftItem","marketplace","metadata","toString","concat","ViewOnMarketButton","url","openPage","ActionTransfer","_nftItem$owner","uiEvents","emit","method","params","DNSSaleText","SaleText","NftAction","kind","_nftItem$dns","slice","numbers","name","_nftItem$dns2","Block","Row","Link","Label1","RightText","NftDetails","React","_item$owner","_config$NFTOnExplorer","useNftItemData","isExpirationDateLoading","expirationDateFormatted","item","config","NFTOnExplorerUrl","H3","ListBlock","margin","copyToClipboard","SpinnerIcon","Text","Delimiter","separatorCommon","CollectionTitle","Icon","span","TonDnsRootCollectionAddress","TelegramUsernamesCollectionAddress","TelegramNumbersCollectionAddress","Title","H2","_templateObject5","SaleBlock","Label4","_templateObject6","buttonTertiaryBackground","UnverifiedLabel","_templateObject7","isTrusted","NftNameContainer","_templateObject8","ButtonsBlock","_templateObject9","DropDownWrapper","_templateObject10","ListBlockStyled","_templateObject11","p","accentBlue","NftPreview","_nftItem$collection","_nftItem$collection3","_nftItem$previews","_collection$metadata","markNftAsSpam","markNftAsSpamLoading","useMarkNftAsSpam","markNftAsTrusted","markNftAsTrustedLoading","useMarkNftAsTrusted","hideNft","useHideNft","useActiveWalletConfig","isSuspicious","trust","TrustType","Whitelist","trustedNfts","includes","collection","ref","useNftCollectionData","description","itemKind","_nftItem$collection2","collectionName","image","previews","find","resolution","isSpamModalOpen","onCloseSpamModal","onOpenSpamModal","useDisclosure","explorerUrl","NotificationTitleBlock","RoundedButton","ChevronDownIcon","InfoCircleIcon","color","UnverifiedNftNotification","action","then","DropDown","containerClassName","closeDropDown","ListItemElement","EyeDisableIcon","BlockIcon","GlobeIcon","EllipsisIcon","warn","NftBlock","Image","Body","open","approvedBy","VerificationIcon","CroppedBodyText","contentColor","NftNotification","setNft","handler","on","off","Content","Grid","backgroundContent","cornerSmall","ios","isHover","css","backgroundContentTint","ImageContainer","ExpiringBlock","NftItemView","_nft$previews","isSale","setHover","selection","useContext","AppSelectionContext","useLayoutEffect","contains","isExpiring","SaleIcon","FireBadgeIcon","NftHeaderLabel2","NftCollectionBody3","NftsList","nfts","className","map","_item$metadata","render_type","openNft","date","DateTimeFormat","month","day","getFullYear","days","Math","floor"],"sourceRoot":""}